/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.dbofflinestorage.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dbofflinestorage.dbscenarios.BlobtableProcedure;

/**
 * Service object for domain model class {@link BlobtableProcedure}.
 */
public interface BlobtableProcedureService {

    /**
     * Creates a new BlobtableProcedure. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on BlobtableProcedure if any.
     *
     * @param blobtableProcedure Details of the BlobtableProcedure to be created; value cannot be null.
     * @return The newly created BlobtableProcedure.
     */
    BlobtableProcedure create(@Valid BlobtableProcedure blobtableProcedure);


	/**
     * Returns BlobtableProcedure by given id if exists.
     *
     * @param blobtableprocedureId The id of the BlobtableProcedure to get; value cannot be null.
     * @return BlobtableProcedure associated with the given blobtableprocedureId.
	 * @throws EntityNotFoundException If no BlobtableProcedure is found.
     */
    BlobtableProcedure getById(Integer blobtableprocedureId);

    /**
     * Find and return the BlobtableProcedure by given id if exists, returns null otherwise.
     *
     * @param blobtableprocedureId The id of the BlobtableProcedure to get; value cannot be null.
     * @return BlobtableProcedure associated with the given blobtableprocedureId.
     */
    BlobtableProcedure findById(Integer blobtableprocedureId);

	/**
     * Find and return the list of BlobtableProcedures by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param blobtableprocedureIds The id's of the BlobtableProcedure to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return BlobtableProcedures associated with the given blobtableprocedureIds.
     */
    List<BlobtableProcedure> findByMultipleIds(List<Integer> blobtableprocedureIds, boolean orderedReturn);


    /**
     * Updates the details of an existing BlobtableProcedure. It replaces all fields of the existing BlobtableProcedure with the given blobtableProcedure.
     *
     * This method overrides the input field values using Server side or database managed properties defined on BlobtableProcedure if any.
     *
     * @param blobtableProcedure The details of the BlobtableProcedure to be updated; value cannot be null.
     * @return The updated BlobtableProcedure.
     * @throws EntityNotFoundException if no BlobtableProcedure is found with given input.
     */
    BlobtableProcedure update(@Valid BlobtableProcedure blobtableProcedure);

    /**
     * Deletes an existing BlobtableProcedure with the given id.
     *
     * @param blobtableprocedureId The id of the BlobtableProcedure to be deleted; value cannot be null.
     * @return The deleted BlobtableProcedure.
     * @throws EntityNotFoundException if no BlobtableProcedure found with the given id.
     */
    BlobtableProcedure delete(Integer blobtableprocedureId);

    /**
     * Deletes an existing BlobtableProcedure with the given object.
     *
     * @param blobtableProcedure The instance of the BlobtableProcedure to be deleted; value cannot be null.
     */
    void delete(BlobtableProcedure blobtableProcedure);

    /**
     * Find all BlobtableProcedures matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching BlobtableProcedures.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<BlobtableProcedure> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all BlobtableProcedures matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching BlobtableProcedures.
     *
     * @see Pageable
     * @see Page
     */
    Page<BlobtableProcedure> findAll(String query, Pageable pageable);

    /**
     * Exports all BlobtableProcedures matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all BlobtableProcedures matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the BlobtableProcedures in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the BlobtableProcedure.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}