/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.dbofflinestorage.dbscenarios.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.dbofflinestorage.dbscenarios.BlobtableProcedure;
import com.dbofflinestorage.dbscenarios.service.BlobtableProcedureService;


/**
 * Controller object for domain model class BlobtableProcedure.
 * @see BlobtableProcedure
 */
@RestController("dbscenarios.BlobtableProcedureController")
@Api(value = "BlobtableProcedureController", description = "Exposes APIs to work with BlobtableProcedure resource.")
@RequestMapping("/dbscenarios/BlobtableProcedure")
public class BlobtableProcedureController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BlobtableProcedureController.class);

    @Autowired
	@Qualifier("dbscenarios.BlobtableProcedureService")
	private BlobtableProcedureService blobtableProcedureService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new BlobtableProcedure instance.")
    @RequestMapping(method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public BlobtableProcedure createBlobtableProcedure(@RequestPart("wm_data_json") BlobtableProcedure blobtableProcedure, @RequestPart(value = "blobcol", required = false) MultipartFile _blobcol) {
		LOGGER.debug("Create BlobtableProcedure with information: {}" , blobtableProcedure);

    blobtableProcedure.setBlobcol(WMMultipartUtils.toByteArray(_blobcol));
		blobtableProcedure = blobtableProcedureService.create(blobtableProcedure);
		LOGGER.debug("Created BlobtableProcedure with information: {}" , blobtableProcedure);

	    return blobtableProcedure;
	}

    @ApiOperation(value = "Returns the BlobtableProcedure instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public BlobtableProcedure getBlobtableProcedure(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting BlobtableProcedure with id: {}" , id);

        BlobtableProcedure foundBlobtableProcedure = blobtableProcedureService.getById(id);
        LOGGER.debug("BlobtableProcedure details with id: {}" , foundBlobtableProcedure);

        return foundBlobtableProcedure;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in BlobtableProcedure instance" )
    @RequestMapping(value = "/{id}/content/{fieldName}", method = RequestMethod.GET, produces="application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DownloadResponse getBlobtableProcedureBLOBContent(@PathVariable("id") Integer id, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestParam(value="download", defaultValue = "false") boolean download) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in BlobtableProcedure instance" , fieldName);

        if(!WMRuntimeUtils.isLob(BlobtableProcedure.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName + " is not a valid BLOB type");
        }
        BlobtableProcedure blobtableProcedure = blobtableProcedureService.getById(id);

        return WMMultipartUtils.buildDownloadResponseForBlob(blobtableProcedure, fieldName, httpServletRequest, download);
    }

    @ApiOperation(value = "Updates the BlobtableProcedure instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public BlobtableProcedure editBlobtableProcedure(@PathVariable("id") Integer id, @RequestBody BlobtableProcedure blobtableProcedure) {
        LOGGER.debug("Editing BlobtableProcedure with id: {}" , blobtableProcedure.getPkid());

        blobtableProcedure.setPkid(id);
        blobtableProcedure = blobtableProcedureService.update(blobtableProcedure);
        LOGGER.debug("BlobtableProcedure details with id: {}" , blobtableProcedure);

        return blobtableProcedure;
    }

    @ApiOperation(value = "Updates the BlobtableProcedure instance associated with the given id.This API should be used when BlobtableProcedure instance fields that require multipart data.") 
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public BlobtableProcedure editBlobtableProcedure(@PathVariable("id") Integer id, MultipartHttpServletRequest multipartHttpServletRequest) {
        BlobtableProcedure newBlobtableProcedure = WMMultipartUtils.toObject(multipartHttpServletRequest, BlobtableProcedure.class, "dbscenarios");
        newBlobtableProcedure.setPkid(id);

        BlobtableProcedure oldBlobtableProcedure = blobtableProcedureService.getById(id);
        WMMultipartUtils.updateLobsContent(oldBlobtableProcedure, newBlobtableProcedure);
        LOGGER.debug("Updating BlobtableProcedure with information: {}" , newBlobtableProcedure);

        return blobtableProcedureService.update(newBlobtableProcedure);
    }

    @ApiOperation(value = "Deletes the BlobtableProcedure instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteBlobtableProcedure(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting BlobtableProcedure with id: {}" , id);

        BlobtableProcedure deletedBlobtableProcedure = blobtableProcedureService.delete(id);

        return deletedBlobtableProcedure != null;
    }

    /**
     * @deprecated Use {@link #findBlobtableProcedures(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of BlobtableProcedure instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<BlobtableProcedure> searchBlobtableProceduresByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering BlobtableProcedures list by query filter:{}", (Object) queryFilters);
        return blobtableProcedureService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of BlobtableProcedure instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<BlobtableProcedure> findBlobtableProcedures(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering BlobtableProcedures list by filter:", query);
        return blobtableProcedureService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of BlobtableProcedure instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<BlobtableProcedure> filterBlobtableProcedures(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering BlobtableProcedures list by filter", query);
        return blobtableProcedureService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportBlobtableProcedures(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return blobtableProcedureService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportBlobtableProceduresAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = BlobtableProcedure.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> blobtableProcedureService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of BlobtableProcedure instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countBlobtableProcedures( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting BlobtableProcedures");
		return blobtableProcedureService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getBlobtableProcedureAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return blobtableProcedureService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BlobtableProcedureService instance
	 */
	protected void setBlobtableProcedureService(BlobtableProcedureService service) {
		this.blobtableProcedureService = service;
	}

}