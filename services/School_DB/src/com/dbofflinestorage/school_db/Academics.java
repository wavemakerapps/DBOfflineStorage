/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.dbofflinestorage.school_db;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.Id;
import javax.persistence.IdClass;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * Academics generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`ACADEMICS`")
@IdClass(AcademicsId.class)
public class Academics implements Serializable {

    private String academicYear;
    private Integer standardId;
    private String classRoom;
    private String classTeacher;
    private StandardDetails standardDetails;
    private AcademicYear academicYearByAcademicYear;

    @Id
    @Column(name = "`ACADEMIC_YEAR`", nullable = false, length = 255)
    public String getAcademicYear() {
        return this.academicYear;
    }

    public void setAcademicYear(String academicYear) {
        this.academicYear = academicYear;
    }

    @Id
    @Column(name = "`STANDARD_ID`", nullable = false, scale = 0, precision = 10)
    public Integer getStandardId() {
        return this.standardId;
    }

    public void setStandardId(Integer standardId) {
        this.standardId = standardId;
    }

    @Column(name = "`CLASS_ROOM`", nullable = true, length = 255)
    public String getClassRoom() {
        return this.classRoom;
    }

    public void setClassRoom(String classRoom) {
        this.classRoom = classRoom;
    }

    @Column(name = "`CLASS_TEACHER`", nullable = true, length = 255)
    public String getClassTeacher() {
        return this.classTeacher;
    }

    public void setClassTeacher(String classTeacher) {
        this.classTeacher = classTeacher;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`STANDARD_ID`", referencedColumnName = "`STANDARD_ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_ACADEMICS_TO_STANDARDjy42t`"))
    @Fetch(FetchMode.JOIN)
    public StandardDetails getStandardDetails() {
        return this.standardDetails;
    }

    public void setStandardDetails(StandardDetails standardDetails) {
        if(standardDetails != null) {
            this.standardId = standardDetails.getStandardId();
        }

        this.standardDetails = standardDetails;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`ACADEMIC_YEAR`", referencedColumnName = "`ACADEMIC_YEAR`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_ACADEMICS_TO_ACADEMICtXssM`"))
    @Fetch(FetchMode.JOIN)
    public AcademicYear getAcademicYearByAcademicYear() {
        return this.academicYearByAcademicYear;
    }

    public void setAcademicYearByAcademicYear(AcademicYear academicYearByAcademicYear) {
        if(academicYearByAcademicYear != null) {
            this.academicYear = academicYearByAcademicYear.getAcademicYear();
        }

        this.academicYearByAcademicYear = academicYearByAcademicYear;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Academics)) return false;
        final Academics academics = (Academics) o;
        return Objects.equals(getAcademicYear(), academics.getAcademicYear()) &&
                Objects.equals(getStandardId(), academics.getStandardId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getAcademicYear(),
                getStandardId());
    }
}