/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.dbofflinestorage.school_db.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.dbofflinestorage.school_db.AcademicTestSubjects;
import com.dbofflinestorage.school_db.AcademicTestSubjectsId;
import com.dbofflinestorage.school_db.TestConducted;
import com.dbofflinestorage.school_db.service.AcademicTestSubjectsService;


/**
 * Controller object for domain model class AcademicTestSubjects.
 * @see AcademicTestSubjects
 */
@RestController("School_DB.AcademicTestSubjectsController")
@Api(value = "AcademicTestSubjectsController", description = "Exposes APIs to work with AcademicTestSubjects resource.")
@RequestMapping("/School_DB/AcademicTestSubjects")
public class AcademicTestSubjectsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AcademicTestSubjectsController.class);

    @Autowired
	@Qualifier("School_DB.AcademicTestSubjectsService")
	private AcademicTestSubjectsService academicTestSubjectsService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new AcademicTestSubjects instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AcademicTestSubjects createAcademicTestSubjects(@RequestBody AcademicTestSubjects academicTestSubjects) {
		LOGGER.debug("Create AcademicTestSubjects with information: {}" , academicTestSubjects);

		academicTestSubjects = academicTestSubjectsService.create(academicTestSubjects);
		LOGGER.debug("Created AcademicTestSubjects with information: {}" , academicTestSubjects);

	    return academicTestSubjects;
	}

    @ApiOperation(value = "Returns the AcademicTestSubjects instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AcademicTestSubjects getAcademicTestSubjects(@RequestParam("academicYear") String academicYear, @RequestParam("subjectId") Integer subjectId, @RequestParam("testId") Integer testId, @RequestParam("standardId") Integer standardId) {

        AcademicTestSubjectsId academictestsubjectsId = new AcademicTestSubjectsId();
        academictestsubjectsId.setAcademicYear(academicYear);
        academictestsubjectsId.setSubjectId(subjectId);
        academictestsubjectsId.setTestId(testId);
        academictestsubjectsId.setStandardId(standardId);

        LOGGER.debug("Getting AcademicTestSubjects with id: {}" , academictestsubjectsId);
        AcademicTestSubjects academicTestSubjects = academicTestSubjectsService.getById(academictestsubjectsId);
        LOGGER.debug("AcademicTestSubjects details with id: {}" , academicTestSubjects);

        return academicTestSubjects;
    }



    @ApiOperation(value = "Updates the AcademicTestSubjects instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AcademicTestSubjects editAcademicTestSubjects(@RequestParam("academicYear") String academicYear, @RequestParam("subjectId") Integer subjectId, @RequestParam("testId") Integer testId, @RequestParam("standardId") Integer standardId, @RequestBody AcademicTestSubjects academicTestSubjects) {

        academicTestSubjects.setAcademicYear(academicYear);
        academicTestSubjects.setSubjectId(subjectId);
        academicTestSubjects.setTestId(testId);
        academicTestSubjects.setStandardId(standardId);

        LOGGER.debug("AcademicTestSubjects details with id is updated with: {}" , academicTestSubjects);

        return academicTestSubjectsService.update(academicTestSubjects);
    }


    @ApiOperation(value = "Deletes the AcademicTestSubjects instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteAcademicTestSubjects(@RequestParam("academicYear") String academicYear, @RequestParam("subjectId") Integer subjectId, @RequestParam("testId") Integer testId, @RequestParam("standardId") Integer standardId) {

        AcademicTestSubjectsId academictestsubjectsId = new AcademicTestSubjectsId();
        academictestsubjectsId.setAcademicYear(academicYear);
        academictestsubjectsId.setSubjectId(subjectId);
        academictestsubjectsId.setTestId(testId);
        academictestsubjectsId.setStandardId(standardId);

        LOGGER.debug("Deleting AcademicTestSubjects with id: {}" , academictestsubjectsId);
        AcademicTestSubjects academicTestSubjects = academicTestSubjectsService.delete(academictestsubjectsId);

        return academicTestSubjects != null;
    }


    /**
     * @deprecated Use {@link #findAcademicTestSubjects(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of AcademicTestSubjects instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<AcademicTestSubjects> searchAcademicTestSubjectsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering AcademicTestSubjects list by query filter:{}", (Object) queryFilters);
        return academicTestSubjectsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AcademicTestSubjects instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AcademicTestSubjects> findAcademicTestSubjects(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AcademicTestSubjects list by filter:", query);
        return academicTestSubjectsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AcademicTestSubjects instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<AcademicTestSubjects> filterAcademicTestSubjects(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AcademicTestSubjects list by filter", query);
        return academicTestSubjectsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportAcademicTestSubjects(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return academicTestSubjectsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportAcademicTestSubjectsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = AcademicTestSubjects.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> academicTestSubjectsService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of AcademicTestSubjects instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countAcademicTestSubjects( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting AcademicTestSubjects");
		return academicTestSubjectsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getAcademicTestSubjectsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return academicTestSubjectsService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/composite-id/testConducteds", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the testConducteds instance associated with the given composite-id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TestConducted> findAssociatedTestConducteds(@RequestParam("academicYear") String academicYear, @RequestParam("subjectId") Integer subjectId, @RequestParam("testId") Integer testId, @RequestParam("standardId") Integer standardId, Pageable pageable) {

        LOGGER.debug("Fetching all associated testConducteds");
        return academicTestSubjectsService.findAssociatedTestConducteds(academicYear, subjectId, testId, standardId, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AcademicTestSubjectsService instance
	 */
	protected void setAcademicTestSubjectsService(AcademicTestSubjectsService service) {
		this.academicTestSubjectsService = service;
	}

}