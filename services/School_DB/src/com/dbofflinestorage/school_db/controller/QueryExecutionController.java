/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.dbofflinestorage.school_db.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.InputStream;
import java.sql.Date;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
import org.springframework.web.util.UriComponentsBuilder;

import com.fasterxml.jackson.annotation.JsonView;
import com.wavemaker.commons.json.views.JsonViews.BlobAsUrlView;
import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.dbofflinestorage.school_db.service.School_DBQueryExecutorService;
import com.dbofflinestorage.school_db.models.query.*;

@RestController(value = "School_DB.QueryExecutionController")
@RequestMapping("/School_DB/queryExecutor")
@Api(value = "QueryExecutionController", description = "controller class for query execution")
public class QueryExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(QueryExecutionController.class);

    @Autowired
    private School_DBQueryExecutorService queryService;

    @Autowired
	private ExportedFileManager exportedFileManager;

    @RequestMapping(value = "/queries/SV_SubStr", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "SV_SubStr")
    public Page<SvSubStrResponse> executeSV_SubStr(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_SubStr");
        Page<SvSubStrResponse> _result = queryService.executeSV_SubStr(pageable);
        LOGGER.debug("got the result for named query: SV_SubStr, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SV_SubStr")
    @RequestMapping(value = "/queries/SV_SubStr/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSV_SubStr(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SV_SubStr");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SV_SubStr";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSV_SubStr( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/SV_InnerJoins", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "SV_InnerJoins")
    public Page<SvInnerJoinsResponse> executeSV_InnerJoins(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_InnerJoins");
        Page<SvInnerJoinsResponse> _result = queryService.executeSV_InnerJoins(pageable);
        LOGGER.debug("got the result for named query: SV_InnerJoins, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SV_InnerJoins")
    @RequestMapping(value = "/queries/SV_InnerJoins/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSV_InnerJoins(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SV_InnerJoins");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SV_InnerJoins";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSV_InnerJoins( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/SV_NOTNULL", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "SV_NOTNULL")
    public Page<SvNotnullResponse> executeSV_NOTNULL(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_NOTNULL");
        Page<SvNotnullResponse> _result = queryService.executeSV_NOTNULL(pageable);
        LOGGER.debug("got the result for named query: SV_NOTNULL, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SV_NOTNULL")
    @RequestMapping(value = "/queries/SV_NOTNULL/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSV_NOTNULL(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SV_NOTNULL");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SV_NOTNULL";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSV_NOTNULL( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @JsonView(BlobAsUrlView.class)
    @RequestMapping(value = "/queries/SV_StudentDetails", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "SV_StudentDetails")
    public Page<SvStudentDetailsResponse> executeSV_StudentDetails(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_StudentDetails");
        Page<SvStudentDetailsResponse> _result = queryService.executeSV_StudentDetails(pageable);
        LOGGER.debug("got the result for named query: SV_StudentDetails, result:{}", _result);
        UriComponentsBuilder _uriBuilder = ServletUriComponentsBuilder.fromRequest(_request);
        _uriBuilder.path("/{studentId}/content/{_fieldName_}");
        for(SvStudentDetailsResponse _content : _result.getContent()) {
            Map<String, Object> _properties = new HashMap(2);
            _properties.put("studentId", _content.getStudentId());
            _properties.put("_fieldName_", "profilePic");
            if(_content.getProfilePic() != null) {
                _content.setProfilePic(_uriBuilder.buildAndExpand(_properties).toUriString().getBytes());
            } else {
                _content.setProfilePic(null);
            }
        }
        return _result;
    }

    @ApiOperation(value = "Retrives the BLOB content for property profilePic in query SV_StudentDetails")
    @RequestMapping(value = "/queries/SV_StudentDetails/{studentId}/content/profilePic", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable getProfilePicContentForSV_StudentDetails(@PathVariable("studentId") Integer studentId, @RequestParam(value="downloadAsAttachment", defaultValue = "false") boolean downloadAsAttachment, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_StudentDetails");

        InputStream _result = queryService.getProfilePicContentForSV_StudentDetails(studentId);
        return WMMultipartUtils.buildDownloadResponse(_request, _result, downloadAsAttachment);
    }

    @ApiOperation(value = "Returns downloadable file url for query SV_StudentDetails")
    @RequestMapping(value = "/queries/SV_StudentDetails/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSV_StudentDetails(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SV_StudentDetails");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SV_StudentDetails";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSV_StudentDetails( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/SV_LeftOuterJoin", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "SV_LeftOuterJoin")
    public Page<SvLeftOuterJoinResponse> executeSV_LeftOuterJoin(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_LeftOuterJoin");
        Page<SvLeftOuterJoinResponse> _result = queryService.executeSV_LeftOuterJoin(pageable);
        LOGGER.debug("got the result for named query: SV_LeftOuterJoin, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SV_LeftOuterJoin")
    @RequestMapping(value = "/queries/SV_LeftOuterJoin/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSV_LeftOuterJoin(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SV_LeftOuterJoin");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SV_LeftOuterJoin";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSV_LeftOuterJoin( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/SV_DateFormatSyntax", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "SV_DateFormatSyntax")
    public Page<SvDateFormatSyntaxResponse> executeSV_DateFormatSyntax(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_DateFormatSyntax");
        Page<SvDateFormatSyntaxResponse> _result = queryService.executeSV_DateFormatSyntax(pageable);
        LOGGER.debug("got the result for named query: SV_DateFormatSyntax, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SV_DateFormatSyntax")
    @RequestMapping(value = "/queries/SV_DateFormatSyntax/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSV_DateFormatSyntax(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SV_DateFormatSyntax");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SV_DateFormatSyntax";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSV_DateFormatSyntax( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @JsonView(BlobAsUrlView.class)
    @RequestMapping(value = "/queries/SV_InnerJoinWithOrderBy", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "SV_InnerJoinWithOrderBy")
    public Page<SvInnerJoinWithOrderByResponse> executeSV_InnerJoinWithOrderBy(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_InnerJoinWithOrderBy");
        Page<SvInnerJoinWithOrderByResponse> _result = queryService.executeSV_InnerJoinWithOrderBy(pageable);
        LOGGER.debug("got the result for named query: SV_InnerJoinWithOrderBy, result:{}", _result);
        UriComponentsBuilder _uriBuilder = ServletUriComponentsBuilder.fromRequest(_request);
        _uriBuilder.path("/{empId}/content/{_fieldName_}");
        for(SvInnerJoinWithOrderByResponse _content : _result.getContent()) {
            Map<String, Object> _properties = new HashMap(2);
            _properties.put("empId", _content.getEmpId());
            _properties.put("_fieldName_", "picUrl");
            if(_content.getPicUrl() != null) {
                _content.setPicUrl(_uriBuilder.buildAndExpand(_properties).toUriString().getBytes());
            } else {
                _content.setPicUrl(null);
            }
        }
        return _result;
    }

    @ApiOperation(value = "Retrives the BLOB content for property picUrl in query SV_InnerJoinWithOrderBy")
    @RequestMapping(value = "/queries/SV_InnerJoinWithOrderBy/{empId}/content/picUrl", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable getPicUrlContentForSV_InnerJoinWithOrderBy(@PathVariable("empId") Integer empId, @RequestParam(value="downloadAsAttachment", defaultValue = "false") boolean downloadAsAttachment, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_InnerJoinWithOrderBy");

        InputStream _result = queryService.getPicUrlContentForSV_InnerJoinWithOrderBy(empId);
        return WMMultipartUtils.buildDownloadResponse(_request, _result, downloadAsAttachment);
    }

    @ApiOperation(value = "Returns downloadable file url for query SV_InnerJoinWithOrderBy")
    @RequestMapping(value = "/queries/SV_InnerJoinWithOrderBy/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSV_InnerJoinWithOrderBy(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SV_InnerJoinWithOrderBy");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SV_InnerJoinWithOrderBy";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSV_InnerJoinWithOrderBy( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/HQL_COUNT_DISTINCT", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "HQL_COUNT_DISTINCT")
    public Page<HqlCountDistinctResponse> executeHQL_COUNT_DISTINCT(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: HQL_COUNT_DISTINCT");
        Page<HqlCountDistinctResponse> _result = queryService.executeHQL_COUNT_DISTINCT(pageable);
        LOGGER.debug("got the result for named query: HQL_COUNT_DISTINCT, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query HQL_COUNT_DISTINCT")
    @RequestMapping(value = "/queries/HQL_COUNT_DISTINCT/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportHQL_COUNT_DISTINCT(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: HQL_COUNT_DISTINCT");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "HQL_COUNT_DISTINCT";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportHQL_COUNT_DISTINCT( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/SV_MAXFunction", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "SV_MAXFunction")
    public Page<SvMaxfunctionResponse> executeSV_MAXFunction(@RequestParam(value = "ACADEMIC_YEAR") String academicYear, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_MAXFunction");
        Page<SvMaxfunctionResponse> _result = queryService.executeSV_MAXFunction(academicYear, pageable);
        LOGGER.debug("got the result for named query: SV_MAXFunction, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SV_MAXFunction")
    @RequestMapping(value = "/queries/SV_MAXFunction/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSV_MAXFunction(@RequestParam(value = "ACADEMIC_YEAR") String academicYear, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SV_MAXFunction");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SV_MAXFunction";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSV_MAXFunction(academicYear,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/SV_LowerFunction", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "SV_LowerFunction")
    public Page<SvLowerFunctionResponse> executeSV_LowerFunction(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_LowerFunction");
        Page<SvLowerFunctionResponse> _result = queryService.executeSV_LowerFunction(pageable);
        LOGGER.debug("got the result for named query: SV_LowerFunction, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SV_LowerFunction")
    @RequestMapping(value = "/queries/SV_LowerFunction/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSV_LowerFunction(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SV_LowerFunction");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SV_LowerFunction";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSV_LowerFunction( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/SV_SumFunction", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "SV_SumFunction")
    public Page<SvSumFunctionResponse> executeSV_SumFunction(@RequestParam(value = "ACADEMIC_YEAR") String academicYear, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_SumFunction");
        Page<SvSumFunctionResponse> _result = queryService.executeSV_SumFunction(academicYear, pageable);
        LOGGER.debug("got the result for named query: SV_SumFunction, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SV_SumFunction")
    @RequestMapping(value = "/queries/SV_SumFunction/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSV_SumFunction(@RequestParam(value = "ACADEMIC_YEAR") String academicYear, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SV_SumFunction");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SV_SumFunction";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSV_SumFunction(academicYear,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/SV_GroupByHavingClause", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "SV_GroupByHavingClause")
    public Page<SvGroupByHavingClauseResponse> executeSV_GroupByHavingClause(@RequestParam(value = "ACADEMIC_YEAR") String academicYear, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_GroupByHavingClause");
        Page<SvGroupByHavingClauseResponse> _result = queryService.executeSV_GroupByHavingClause(academicYear, pageable);
        LOGGER.debug("got the result for named query: SV_GroupByHavingClause, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SV_GroupByHavingClause")
    @RequestMapping(value = "/queries/SV_GroupByHavingClause/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSV_GroupByHavingClause(@RequestParam(value = "ACADEMIC_YEAR") String academicYear, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SV_GroupByHavingClause");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SV_GroupByHavingClause";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSV_GroupByHavingClause(academicYear,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/SV_MinFunction", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "SV_MinFunction")
    public Page<SvMinFunctionResponse> executeSV_MinFunction(@RequestParam(value = "ACADEMIC_YEAR") String academicYear, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_MinFunction");
        Page<SvMinFunctionResponse> _result = queryService.executeSV_MinFunction(academicYear, pageable);
        LOGGER.debug("got the result for named query: SV_MinFunction, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SV_MinFunction")
    @RequestMapping(value = "/queries/SV_MinFunction/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSV_MinFunction(@RequestParam(value = "ACADEMIC_YEAR") String academicYear, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SV_MinFunction");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SV_MinFunction";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSV_MinFunction(academicYear,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/HQL_GroupBy", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "HQL_GroupBy")
    public Page<HqlGroupByResponse> executeHQL_GroupBy(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: HQL_GroupBy");
        Page<HqlGroupByResponse> _result = queryService.executeHQL_GroupBy(pageable);
        LOGGER.debug("got the result for named query: HQL_GroupBy, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query HQL_GroupBy")
    @RequestMapping(value = "/queries/HQL_GroupBy/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportHQL_GroupBy(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: HQL_GroupBy");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "HQL_GroupBy";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportHQL_GroupBy( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/SV_Alias", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "SV_Alias")
    public Page<SvAliasResponse> executeSV_Alias(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_Alias");
        Page<SvAliasResponse> _result = queryService.executeSV_Alias(pageable);
        LOGGER.debug("got the result for named query: SV_Alias, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SV_Alias")
    @RequestMapping(value = "/queries/SV_Alias/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSV_Alias(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SV_Alias");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SV_Alias";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSV_Alias( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/SV_GroupBy", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "SV_GroupBy")
    public Page<SvGroupByResponse> executeSV_GroupBy(@RequestParam(value = "ACADEMIC_YEAR") String academicYear, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_GroupBy");
        Page<SvGroupByResponse> _result = queryService.executeSV_GroupBy(academicYear, pageable);
        LOGGER.debug("got the result for named query: SV_GroupBy, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SV_GroupBy")
    @RequestMapping(value = "/queries/SV_GroupBy/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSV_GroupBy(@RequestParam(value = "ACADEMIC_YEAR") String academicYear, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SV_GroupBy");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SV_GroupBy";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSV_GroupBy(academicYear,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @JsonView(BlobAsUrlView.class)
    @RequestMapping(value = "/queries/SV_UnionAll", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "SV_UnionAll")
    public Page<SvUnionAllResponse> executeSV_UnionAll(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_UnionAll");
        Page<SvUnionAllResponse> _result = queryService.executeSV_UnionAll(pageable);
        LOGGER.debug("got the result for named query: SV_UnionAll, result:{}", _result);
        UriComponentsBuilder _uriBuilder = ServletUriComponentsBuilder.fromRequest(_request);
        _uriBuilder.path("/{empId}/content/{_fieldName_}");
        for(SvUnionAllResponse _content : _result.getContent()) {
            Map<String, Object> _properties = new HashMap(2);
            _properties.put("empId", _content.getEmpId());
            _properties.put("_fieldName_", "zip");
            if(_content.getZip() != null) {
                _content.setZip(_uriBuilder.buildAndExpand(_properties).toUriString().getBytes());
            } else {
                _content.setZip(null);
            }
            _properties.put("_fieldName_", "picUrl");
            if(_content.getPicUrl() != null) {
                _content.setPicUrl(_uriBuilder.buildAndExpand(_properties).toUriString().getBytes());
            } else {
                _content.setPicUrl(null);
            }
        }
        return _result;
    }

    @ApiOperation(value = "Retrives the BLOB content for property zip in query SV_UnionAll")
    @RequestMapping(value = "/queries/SV_UnionAll/{empId}/content/zip", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable getZipContentForSV_UnionAll(@PathVariable("empId") Integer empId, @RequestParam(value="downloadAsAttachment", defaultValue = "false") boolean downloadAsAttachment, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_UnionAll");

        InputStream _result = queryService.getZipContentForSV_UnionAll(empId);
        return WMMultipartUtils.buildDownloadResponse(_request, _result, downloadAsAttachment);
    }

    @ApiOperation(value = "Retrives the BLOB content for property picUrl in query SV_UnionAll")
    @RequestMapping(value = "/queries/SV_UnionAll/{empId}/content/picUrl", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable getPicUrlContentForSV_UnionAll(@PathVariable("empId") Integer empId, @RequestParam(value="downloadAsAttachment", defaultValue = "false") boolean downloadAsAttachment, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_UnionAll");

        InputStream _result = queryService.getPicUrlContentForSV_UnionAll(empId);
        return WMMultipartUtils.buildDownloadResponse(_request, _result, downloadAsAttachment);
    }

    @ApiOperation(value = "Returns downloadable file url for query SV_UnionAll")
    @RequestMapping(value = "/queries/SV_UnionAll/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSV_UnionAll(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SV_UnionAll");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SV_UnionAll";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSV_UnionAll( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/SV_UpperFunction", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "SV_UpperFunction")
    public Page<SvUpperFunctionResponse> executeSV_UpperFunction(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_UpperFunction");
        Page<SvUpperFunctionResponse> _result = queryService.executeSV_UpperFunction(pageable);
        LOGGER.debug("got the result for named query: SV_UpperFunction, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SV_UpperFunction")
    @RequestMapping(value = "/queries/SV_UpperFunction/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSV_UpperFunction(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SV_UpperFunction");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SV_UpperFunction";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSV_UpperFunction( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/SV_CountSyntax", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "SV_CountSyntax")
    public Page<SvCountSyntaxResponse> executeSV_CountSyntax(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_CountSyntax");
        Page<SvCountSyntaxResponse> _result = queryService.executeSV_CountSyntax(pageable);
        LOGGER.debug("got the result for named query: SV_CountSyntax, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SV_CountSyntax")
    @RequestMapping(value = "/queries/SV_CountSyntax/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSV_CountSyntax(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SV_CountSyntax");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SV_CountSyntax";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSV_CountSyntax( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/SV_AVGFunction", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "SV_AVGFunction")
    public Page<SvAvgfunctionResponse> executeSV_AVGFunction(@RequestParam(value = "STUDENT_ID") Integer studentId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_AVGFunction");
        Page<SvAvgfunctionResponse> _result = queryService.executeSV_AVGFunction(studentId, pageable);
        LOGGER.debug("got the result for named query: SV_AVGFunction, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SV_AVGFunction")
    @RequestMapping(value = "/queries/SV_AVGFunction/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSV_AVGFunction(@RequestParam(value = "STUDENT_ID") Integer studentId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SV_AVGFunction");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SV_AVGFunction";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSV_AVGFunction(studentId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/SV_FullJoin", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "SV_FullJoin")
    public Page<SvFullJoinResponse> executeSV_FullJoin(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_FullJoin");
        Page<SvFullJoinResponse> _result = queryService.executeSV_FullJoin(pageable);
        LOGGER.debug("got the result for named query: SV_FullJoin, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SV_FullJoin")
    @RequestMapping(value = "/queries/SV_FullJoin/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSV_FullJoin(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SV_FullJoin");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SV_FullJoin";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSV_FullJoin( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/SV_NestedQuery", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "SV_NestedQuery")
    public Page<SvNestedQueryResponse> executeSV_NestedQuery(@RequestParam(value = "ACADEMIC_YEAR") String academicYear, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_NestedQuery");
        Page<SvNestedQueryResponse> _result = queryService.executeSV_NestedQuery(academicYear, pageable);
        LOGGER.debug("got the result for named query: SV_NestedQuery, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SV_NestedQuery")
    @RequestMapping(value = "/queries/SV_NestedQuery/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSV_NestedQuery(@RequestParam(value = "ACADEMIC_YEAR") String academicYear, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SV_NestedQuery");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SV_NestedQuery";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSV_NestedQuery(academicYear,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/SV_ConcatQuery", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "SV_ConcatQuery")
    public Page<SvConcatQueryResponse> executeSV_ConcatQuery(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_ConcatQuery");
        Page<SvConcatQueryResponse> _result = queryService.executeSV_ConcatQuery(pageable);
        LOGGER.debug("got the result for named query: SV_ConcatQuery, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SV_ConcatQuery")
    @RequestMapping(value = "/queries/SV_ConcatQuery/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSV_ConcatQuery(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SV_ConcatQuery");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SV_ConcatQuery";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSV_ConcatQuery( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/SV_LengthFunction", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "SV_LengthFunction")
    public Page<SvLengthFunctionResponse> executeSV_LengthFunction(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_LengthFunction");
        Page<SvLengthFunctionResponse> _result = queryService.executeSV_LengthFunction(pageable);
        LOGGER.debug("got the result for named query: SV_LengthFunction, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SV_LengthFunction")
    @RequestMapping(value = "/queries/SV_LengthFunction/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSV_LengthFunction(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SV_LengthFunction");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SV_LengthFunction";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSV_LengthFunction( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @JsonView(BlobAsUrlView.class)
    @RequestMapping(value = "/queries/SV_QueryWithDate", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "SV_QueryWithDate")
    public Page<SvQueryWithDateResponse> executeSV_QueryWithDate(@RequestParam(value = "JDATE") Date jdate, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_QueryWithDate");
        Page<SvQueryWithDateResponse> _result = queryService.executeSV_QueryWithDate(jdate, pageable);
        LOGGER.debug("got the result for named query: SV_QueryWithDate, result:{}", _result);
        UriComponentsBuilder _uriBuilder = ServletUriComponentsBuilder.fromRequest(_request);
        _uriBuilder.path("/{studentId}/content/{_fieldName_}");
        for(SvQueryWithDateResponse _content : _result.getContent()) {
            Map<String, Object> _properties = new HashMap(2);
            _properties.put("studentId", _content.getStudentId());
            _properties.put("_fieldName_", "profilePic");
            if(_content.getProfilePic() != null) {
                _content.setProfilePic(_uriBuilder.buildAndExpand(_properties).toUriString().getBytes());
            } else {
                _content.setProfilePic(null);
            }
        }
        return _result;
    }

    @ApiOperation(value = "Retrives the BLOB content for property profilePic in query SV_QueryWithDate")
    @RequestMapping(value = "/queries/SV_QueryWithDate/{studentId}/content/profilePic", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable getProfilePicContentForSV_QueryWithDate(@PathVariable("studentId") Integer studentId, @RequestParam(value = "JDATE") Date jdate, @RequestParam(value="downloadAsAttachment", defaultValue = "false") boolean downloadAsAttachment, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_QueryWithDate");

        InputStream _result = queryService.getProfilePicContentForSV_QueryWithDate(studentId, jdate);
        return WMMultipartUtils.buildDownloadResponse(_request, _result, downloadAsAttachment);
    }

    @ApiOperation(value = "Returns downloadable file url for query SV_QueryWithDate")
    @RequestMapping(value = "/queries/SV_QueryWithDate/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSV_QueryWithDate(@RequestParam(value = "JDATE") Date jdate, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SV_QueryWithDate");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SV_QueryWithDate";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSV_QueryWithDate(jdate,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/SV_IsNULL", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "SV_IsNULL")
    public Page<SvIsNullResponse> executeSV_IsNULL(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_IsNULL");
        Page<SvIsNullResponse> _result = queryService.executeSV_IsNULL(pageable);
        LOGGER.debug("got the result for named query: SV_IsNULL, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SV_IsNULL")
    @RequestMapping(value = "/queries/SV_IsNULL/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSV_IsNULL(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SV_IsNULL");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SV_IsNULL";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSV_IsNULL( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/SV_RightJoin", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "SV_RightJoin")
    public Page<SvRightJoinResponse> executeSV_RightJoin(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_RightJoin");
        Page<SvRightJoinResponse> _result = queryService.executeSV_RightJoin(pageable);
        LOGGER.debug("got the result for named query: SV_RightJoin, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SV_RightJoin")
    @RequestMapping(value = "/queries/SV_RightJoin/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSV_RightJoin(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SV_RightJoin");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SV_RightJoin";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSV_RightJoin( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

}