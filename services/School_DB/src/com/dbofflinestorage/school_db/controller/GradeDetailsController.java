/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.dbofflinestorage.school_db.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.dbofflinestorage.school_db.GradeDetails;
import com.dbofflinestorage.school_db.Results;
import com.dbofflinestorage.school_db.service.GradeDetailsService;


/**
 * Controller object for domain model class GradeDetails.
 * @see GradeDetails
 */
@RestController("School_DB.GradeDetailsController")
@Api(value = "GradeDetailsController", description = "Exposes APIs to work with GradeDetails resource.")
@RequestMapping("/School_DB/GradeDetails")
public class GradeDetailsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(GradeDetailsController.class);

    @Autowired
	@Qualifier("School_DB.GradeDetailsService")
	private GradeDetailsService gradeDetailsService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new GradeDetails instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public GradeDetails createGradeDetails(@RequestBody GradeDetails gradeDetails) {
		LOGGER.debug("Create GradeDetails with information: {}" , gradeDetails);

		gradeDetails = gradeDetailsService.create(gradeDetails);
		LOGGER.debug("Created GradeDetails with information: {}" , gradeDetails);

	    return gradeDetails;
	}

    @ApiOperation(value = "Returns the GradeDetails instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public GradeDetails getGradeDetails(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting GradeDetails with id: {}" , id);

        GradeDetails foundGradeDetails = gradeDetailsService.getById(id);
        LOGGER.debug("GradeDetails details with id: {}" , foundGradeDetails);

        return foundGradeDetails;
    }

    @ApiOperation(value = "Updates the GradeDetails instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public GradeDetails editGradeDetails(@PathVariable("id") Integer id, @RequestBody GradeDetails gradeDetails) {
        LOGGER.debug("Editing GradeDetails with id: {}" , gradeDetails.getGradeId());

        gradeDetails.setGradeId(id);
        gradeDetails = gradeDetailsService.update(gradeDetails);
        LOGGER.debug("GradeDetails details with id: {}" , gradeDetails);

        return gradeDetails;
    }

    @ApiOperation(value = "Deletes the GradeDetails instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteGradeDetails(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting GradeDetails with id: {}" , id);

        GradeDetails deletedGradeDetails = gradeDetailsService.delete(id);

        return deletedGradeDetails != null;
    }

    @RequestMapping(value = "/grade/{grade}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching GradeDetails with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public GradeDetails getByGrade(@PathVariable("grade") String grade) {
        LOGGER.debug("Getting GradeDetails with uniques key Grade");
        return gradeDetailsService.getByGrade(grade);
    }

    /**
     * @deprecated Use {@link #findGradeDetails(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of GradeDetails instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<GradeDetails> searchGradeDetailsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering GradeDetails list by query filter:{}", (Object) queryFilters);
        return gradeDetailsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of GradeDetails instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<GradeDetails> findGradeDetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering GradeDetails list by filter:", query);
        return gradeDetailsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of GradeDetails instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<GradeDetails> filterGradeDetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering GradeDetails list by filter", query);
        return gradeDetailsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGradeDetails(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return gradeDetailsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGradeDetailsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = GradeDetails.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> gradeDetailsService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of GradeDetails instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countGradeDetails( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting GradeDetails");
		return gradeDetailsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getGradeDetailsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return gradeDetailsService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/resultses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the resultses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Results> findAssociatedResultses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated resultses");
        return gradeDetailsService.findAssociatedResultses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service GradeDetailsService instance
	 */
	protected void setGradeDetailsService(GradeDetailsService service) {
		this.gradeDetailsService = service;
	}

}