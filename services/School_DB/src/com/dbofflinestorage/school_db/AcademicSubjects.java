/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.dbofflinestorage.school_db;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.Id;
import javax.persistence.IdClass;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * AcademicSubjects generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`ACADEMIC_SUBJECTS`")
@IdClass(AcademicSubjectsId.class)
public class AcademicSubjects implements Serializable {

    private String academicYear;
    private Integer subjectId;
    private Integer standardId;
    private String subjectTeacher;
    private SubjectDetails subjectDetails;
    private Academics academics;

    @Id
    @Column(name = "`ACADEMIC_YEAR`", nullable = false, length = 255)
    public String getAcademicYear() {
        return this.academicYear;
    }

    public void setAcademicYear(String academicYear) {
        this.academicYear = academicYear;
    }

    @Id
    @Column(name = "`SUBJECT_ID`", nullable = false, scale = 0, precision = 10)
    public Integer getSubjectId() {
        return this.subjectId;
    }

    public void setSubjectId(Integer subjectId) {
        this.subjectId = subjectId;
    }

    @Id
    @Column(name = "`STANDARD_ID`", nullable = false, scale = 0, precision = 10)
    public Integer getStandardId() {
        return this.standardId;
    }

    public void setStandardId(Integer standardId) {
        this.standardId = standardId;
    }

    @Column(name = "`SUBJECT_TEACHER`", nullable = true, length = 255)
    public String getSubjectTeacher() {
        return this.subjectTeacher;
    }

    public void setSubjectTeacher(String subjectTeacher) {
        this.subjectTeacher = subjectTeacher;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`SUBJECT_ID`", referencedColumnName = "`SUBJECT_ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_ACADEMIC_SUBJECTS_TO_vYqYW`"))
    @Fetch(FetchMode.JOIN)
    public SubjectDetails getSubjectDetails() {
        return this.subjectDetails;
    }

    public void setSubjectDetails(SubjectDetails subjectDetails) {
        if(subjectDetails != null) {
            this.subjectId = subjectDetails.getSubjectId();
        }

        this.subjectDetails = subjectDetails;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumns(value = {
            @JoinColumn(name = "`ACADEMIC_YEAR`", referencedColumnName = "`ACADEMIC_YEAR`", insertable = false, updatable = false),
            @JoinColumn(name = "`STANDARD_ID`", referencedColumnName = "`STANDARD_ID`", insertable = false, updatable = false)},
        foreignKey = @ForeignKey(name = "`FK_ACADEMIC_SUBJECTS_TO_LUYp3`"))
    @Fetch(FetchMode.JOIN)
    public Academics getAcademics() {
        return this.academics;
    }

    public void setAcademics(Academics academics) {
        if(academics != null) {
            this.academicYear = academics.getAcademicYear();
            this.standardId = academics.getStandardId();
        }

        this.academics = academics;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof AcademicSubjects)) return false;
        final AcademicSubjects academicSubjects = (AcademicSubjects) o;
        return Objects.equals(getAcademicYear(), academicSubjects.getAcademicYear()) &&
                Objects.equals(getSubjectId(), academicSubjects.getSubjectId()) &&
                Objects.equals(getStandardId(), academicSubjects.getStandardId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getAcademicYear(),
                getSubjectId(),
                getStandardId());
    }
}