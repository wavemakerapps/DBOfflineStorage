/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.dbofflinestorage.school_db.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.InputStream;
import java.io.OutputStream;
import java.sql.Date;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportOptions;

import com.dbofflinestorage.school_db.models.query.*;

public interface School_DBQueryExecutorService {

    Page<SvSubStrResponse> executeSV_SubStr(Pageable pageable);

    void exportSV_SubStr(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<SvInnerJoinsResponse> executeSV_InnerJoins(Pageable pageable);

    void exportSV_InnerJoins(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<SvNotnullResponse> executeSV_NOTNULL(Pageable pageable);

    void exportSV_NOTNULL(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<SvStudentDetailsResponse> executeSV_StudentDetails(Pageable pageable);

    InputStream getProfilePicContentForSV_StudentDetails(Integer studentId) throws EntityNotFoundException;

    void exportSV_StudentDetails(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<SvLeftOuterJoinResponse> executeSV_LeftOuterJoin(Pageable pageable);

    void exportSV_LeftOuterJoin(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<SvDateFormatSyntaxResponse> executeSV_DateFormatSyntax(Pageable pageable);

    void exportSV_DateFormatSyntax(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<SvInnerJoinWithOrderByResponse> executeSV_InnerJoinWithOrderBy(Pageable pageable);

    InputStream getPicUrlContentForSV_InnerJoinWithOrderBy(Integer empId) throws EntityNotFoundException;

    void exportSV_InnerJoinWithOrderBy(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<HqlCountDistinctResponse> executeHQL_COUNT_DISTINCT(Pageable pageable);

    void exportHQL_COUNT_DISTINCT(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<SvMaxfunctionResponse> executeSV_MAXFunction(String academicYear, Pageable pageable);

    void exportSV_MAXFunction(String academicYear, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<SvLowerFunctionResponse> executeSV_LowerFunction(Pageable pageable);

    void exportSV_LowerFunction(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<SvSumFunctionResponse> executeSV_SumFunction(String academicYear, Pageable pageable);

    void exportSV_SumFunction(String academicYear, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<SvGroupByHavingClauseResponse> executeSV_GroupByHavingClause(String academicYear, Pageable pageable);

    void exportSV_GroupByHavingClause(String academicYear, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<SvMinFunctionResponse> executeSV_MinFunction(String academicYear, Pageable pageable);

    void exportSV_MinFunction(String academicYear, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<HqlGroupByResponse> executeHQL_GroupBy(Pageable pageable);

    void exportHQL_GroupBy(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<SvAliasResponse> executeSV_Alias(Pageable pageable);

    void exportSV_Alias(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<SvGroupByResponse> executeSV_GroupBy(String academicYear, Pageable pageable);

    void exportSV_GroupBy(String academicYear, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<SvUnionAllResponse> executeSV_UnionAll(Pageable pageable);

    InputStream getZipContentForSV_UnionAll(Integer empId) throws EntityNotFoundException;

    InputStream getPicUrlContentForSV_UnionAll(Integer empId) throws EntityNotFoundException;

    void exportSV_UnionAll(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<SvUpperFunctionResponse> executeSV_UpperFunction(Pageable pageable);

    void exportSV_UpperFunction(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<SvCountSyntaxResponse> executeSV_CountSyntax(Pageable pageable);

    void exportSV_CountSyntax(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<SvAvgfunctionResponse> executeSV_AVGFunction(Integer studentId, Pageable pageable);

    void exportSV_AVGFunction(Integer studentId, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<SvFullJoinResponse> executeSV_FullJoin(Pageable pageable);

    void exportSV_FullJoin(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<SvNestedQueryResponse> executeSV_NestedQuery(String academicYear, Pageable pageable);

    void exportSV_NestedQuery(String academicYear, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<SvConcatQueryResponse> executeSV_ConcatQuery(Pageable pageable);

    void exportSV_ConcatQuery(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<SvLengthFunctionResponse> executeSV_LengthFunction(Pageable pageable);

    void exportSV_LengthFunction(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<SvQueryWithDateResponse> executeSV_QueryWithDate(Date jdate, Pageable pageable);

    InputStream getProfilePicContentForSV_QueryWithDate(Integer studentId, Date jdate) throws EntityNotFoundException;

    void exportSV_QueryWithDate(Date jdate, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<SvIsNullResponse> executeSV_IsNULL(Pageable pageable);

    void exportSV_IsNULL(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

    Page<SvRightJoinResponse> executeSV_RightJoin(Pageable pageable);

    void exportSV_RightJoin(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream);

}