/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.dbofflinestorage.school_db.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dbofflinestorage.school_db.StudentIdentification;

/**
 * Service object for domain model class {@link StudentIdentification}.
 */
public interface StudentIdentificationService {

    /**
     * Creates a new StudentIdentification. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on StudentIdentification if any.
     *
     * @param studentIdentification Details of the StudentIdentification to be created; value cannot be null.
     * @return The newly created StudentIdentification.
     */
    StudentIdentification create(@Valid StudentIdentification studentIdentification);


	/**
     * Returns StudentIdentification by given id if exists.
     *
     * @param studentidentificationId The id of the StudentIdentification to get; value cannot be null.
     * @return StudentIdentification associated with the given studentidentificationId.
	 * @throws EntityNotFoundException If no StudentIdentification is found.
     */
    StudentIdentification getById(Integer studentidentificationId);

    /**
     * Find and return the StudentIdentification by given id if exists, returns null otherwise.
     *
     * @param studentidentificationId The id of the StudentIdentification to get; value cannot be null.
     * @return StudentIdentification associated with the given studentidentificationId.
     */
    StudentIdentification findById(Integer studentidentificationId);

	/**
     * Find and return the list of StudentIdentifications by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param studentidentificationIds The id's of the StudentIdentification to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return StudentIdentifications associated with the given studentidentificationIds.
     */
    List<StudentIdentification> findByMultipleIds(List<Integer> studentidentificationIds, boolean orderedReturn);

    /**
     * Find and return the StudentIdentification for given identificationNumber  if exists.
     *
     * @param identificationNumber value of identificationNumber; value cannot be null.
     * @return StudentIdentification associated with the given inputs.
     * @throws EntityNotFoundException if no matching StudentIdentification found.
     */
    StudentIdentification getByIdentificationNumber(String identificationNumber);

    /**
     * Updates the details of an existing StudentIdentification. It replaces all fields of the existing StudentIdentification with the given studentIdentification.
     *
     * This method overrides the input field values using Server side or database managed properties defined on StudentIdentification if any.
     *
     * @param studentIdentification The details of the StudentIdentification to be updated; value cannot be null.
     * @return The updated StudentIdentification.
     * @throws EntityNotFoundException if no StudentIdentification is found with given input.
     */
    StudentIdentification update(@Valid StudentIdentification studentIdentification);

    /**
     * Deletes an existing StudentIdentification with the given id.
     *
     * @param studentidentificationId The id of the StudentIdentification to be deleted; value cannot be null.
     * @return The deleted StudentIdentification.
     * @throws EntityNotFoundException if no StudentIdentification found with the given id.
     */
    StudentIdentification delete(Integer studentidentificationId);

    /**
     * Deletes an existing StudentIdentification with the given object.
     *
     * @param studentIdentification The instance of the StudentIdentification to be deleted; value cannot be null.
     */
    void delete(StudentIdentification studentIdentification);

    /**
     * Find all StudentIdentifications matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching StudentIdentifications.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<StudentIdentification> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all StudentIdentifications matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching StudentIdentifications.
     *
     * @see Pageable
     * @see Page
     */
    Page<StudentIdentification> findAll(String query, Pageable pageable);

    /**
     * Exports all StudentIdentifications matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all StudentIdentifications matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the StudentIdentifications in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the StudentIdentification.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}