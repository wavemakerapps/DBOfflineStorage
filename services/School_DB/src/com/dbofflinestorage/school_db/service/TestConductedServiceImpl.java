/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.dbofflinestorage.school_db.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dbofflinestorage.school_db.Results;
import com.dbofflinestorage.school_db.TestConducted;
import com.dbofflinestorage.school_db.TestConductedId;


/**
 * ServiceImpl object for domain model class TestConducted.
 *
 * @see TestConducted
 */
@Service("School_DB.TestConductedService")
@Validated
public class TestConductedServiceImpl implements TestConductedService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TestConductedServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("School_DB.ResultsService")
    private ResultsService resultsService;

    @Autowired
    @Qualifier("School_DB.TestConductedDao")
    private WMGenericDao<TestConducted, TestConductedId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TestConducted, TestConductedId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "School_DBTransactionManager")
    @Override
    public TestConducted create(TestConducted testConducted) {
        LOGGER.debug("Creating a new TestConducted with information: {}", testConducted);

        TestConducted testConductedCreated = this.wmGenericDao.create(testConducted);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(testConductedCreated);
    }

    @Transactional(readOnly = true, value = "School_DBTransactionManager")
    @Override
    public TestConducted getById(TestConductedId testconductedId) {
        LOGGER.debug("Finding TestConducted by id: {}", testconductedId);
        return this.wmGenericDao.findById(testconductedId);
    }

    @Transactional(readOnly = true, value = "School_DBTransactionManager")
    @Override
    public TestConducted findById(TestConductedId testconductedId) {
        LOGGER.debug("Finding TestConducted by id: {}", testconductedId);
        try {
            return this.wmGenericDao.findById(testconductedId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TestConducted found with id: {}", testconductedId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "School_DBTransactionManager")
    @Override
    public List<TestConducted> findByMultipleIds(List<TestConductedId> testconductedIds, boolean orderedReturn) {
        LOGGER.debug("Finding TestConducteds by ids: {}", testconductedIds);

        return this.wmGenericDao.findByMultipleIds(testconductedIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "School_DBTransactionManager")
    @Override
    public TestConducted update(TestConducted testConducted) {
        LOGGER.debug("Updating TestConducted with information: {}", testConducted);

        this.wmGenericDao.update(testConducted);
        this.wmGenericDao.refresh(testConducted);

        return testConducted;
    }

    @Transactional(value = "School_DBTransactionManager")
    @Override
    public TestConducted delete(TestConductedId testconductedId) {
        LOGGER.debug("Deleting TestConducted with id: {}", testconductedId);
        TestConducted deleted = this.wmGenericDao.findById(testconductedId);
        if (deleted == null) {
            LOGGER.debug("No TestConducted found with id: {}", testconductedId);
            throw new EntityNotFoundException(String.valueOf(testconductedId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "School_DBTransactionManager")
    @Override
    public void delete(TestConducted testConducted) {
        LOGGER.debug("Deleting TestConducted with {}", testConducted);
        this.wmGenericDao.delete(testConducted);
    }

    @Transactional(readOnly = true, value = "School_DBTransactionManager")
    @Override
    public Page<TestConducted> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TestConducteds");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "School_DBTransactionManager")
    @Override
    public Page<TestConducted> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TestConducteds");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "School_DBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service School_DB for table TestConducted to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "School_DBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service School_DB for table TestConducted to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "School_DBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "School_DBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "School_DBTransactionManager")
    @Override
    public Page<Results> findAssociatedResultses(String academicYear, Integer testConductedId, Integer standardId, Pageable pageable) {
        LOGGER.debug("Fetching all associated resultses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("testConducted.academicYear = '" + academicYear + "'");
        queryBuilder.append(" and ");
        queryBuilder.append("testConducted.testConductedId = '" + testConductedId + "'");
        queryBuilder.append(" and ");
        queryBuilder.append("testConducted.standardId = '" + standardId + "'");

        return resultsService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service ResultsService instance
     */
    protected void setResultsService(ResultsService service) {
        this.resultsService = service;
    }

}