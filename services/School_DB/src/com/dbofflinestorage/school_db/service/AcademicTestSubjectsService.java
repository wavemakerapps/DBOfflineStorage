/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.dbofflinestorage.school_db.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dbofflinestorage.school_db.AcademicTestSubjects;
import com.dbofflinestorage.school_db.AcademicTestSubjectsId;
import com.dbofflinestorage.school_db.TestConducted;

/**
 * Service object for domain model class {@link AcademicTestSubjects}.
 */
public interface AcademicTestSubjectsService {

    /**
     * Creates a new AcademicTestSubjects. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on AcademicTestSubjects if any.
     *
     * @param academicTestSubjects Details of the AcademicTestSubjects to be created; value cannot be null.
     * @return The newly created AcademicTestSubjects.
     */
    AcademicTestSubjects create(@Valid AcademicTestSubjects academicTestSubjects);


	/**
     * Returns AcademicTestSubjects by given id if exists.
     *
     * @param academictestsubjectsId The id of the AcademicTestSubjects to get; value cannot be null.
     * @return AcademicTestSubjects associated with the given academictestsubjectsId.
	 * @throws EntityNotFoundException If no AcademicTestSubjects is found.
     */
    AcademicTestSubjects getById(AcademicTestSubjectsId academictestsubjectsId);

    /**
     * Find and return the AcademicTestSubjects by given id if exists, returns null otherwise.
     *
     * @param academictestsubjectsId The id of the AcademicTestSubjects to get; value cannot be null.
     * @return AcademicTestSubjects associated with the given academictestsubjectsId.
     */
    AcademicTestSubjects findById(AcademicTestSubjectsId academictestsubjectsId);

	/**
     * Find and return the list of AcademicTestSubjects by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param academictestsubjectsIds The id's of the AcademicTestSubjects to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return AcademicTestSubjects associated with the given academictestsubjectsIds.
     */
    List<AcademicTestSubjects> findByMultipleIds(List<AcademicTestSubjectsId> academictestsubjectsIds, boolean orderedReturn);


    /**
     * Updates the details of an existing AcademicTestSubjects. It replaces all fields of the existing AcademicTestSubjects with the given academicTestSubjects.
     *
     * This method overrides the input field values using Server side or database managed properties defined on AcademicTestSubjects if any.
     *
     * @param academicTestSubjects The details of the AcademicTestSubjects to be updated; value cannot be null.
     * @return The updated AcademicTestSubjects.
     * @throws EntityNotFoundException if no AcademicTestSubjects is found with given input.
     */
    AcademicTestSubjects update(@Valid AcademicTestSubjects academicTestSubjects);

    /**
     * Deletes an existing AcademicTestSubjects with the given id.
     *
     * @param academictestsubjectsId The id of the AcademicTestSubjects to be deleted; value cannot be null.
     * @return The deleted AcademicTestSubjects.
     * @throws EntityNotFoundException if no AcademicTestSubjects found with the given id.
     */
    AcademicTestSubjects delete(AcademicTestSubjectsId academictestsubjectsId);

    /**
     * Deletes an existing AcademicTestSubjects with the given object.
     *
     * @param academicTestSubjects The instance of the AcademicTestSubjects to be deleted; value cannot be null.
     */
    void delete(AcademicTestSubjects academicTestSubjects);

    /**
     * Find all AcademicTestSubjects matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching AcademicTestSubjects.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<AcademicTestSubjects> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all AcademicTestSubjects matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching AcademicTestSubjects.
     *
     * @see Pageable
     * @see Page
     */
    Page<AcademicTestSubjects> findAll(String query, Pageable pageable);

    /**
     * Exports all AcademicTestSubjects matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all AcademicTestSubjects matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the AcademicTestSubjects in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the AcademicTestSubjects.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated testConducteds for given AcademicTestSubjects id.
     *
     * @param academicYear value of academicYear; value cannot be null
     * @param subjectId value of subjectId; value cannot be null
     * @param testId value of testId; value cannot be null
     * @param standardId value of standardId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated TestConducted instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<TestConducted> findAssociatedTestConducteds(String academicYear, Integer subjectId, Integer testId, Integer standardId, Pageable pageable);

}