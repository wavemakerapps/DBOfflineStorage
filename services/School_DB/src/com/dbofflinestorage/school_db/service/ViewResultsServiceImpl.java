/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.dbofflinestorage.school_db.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dbofflinestorage.school_db.ViewResults;
import com.dbofflinestorage.school_db.ViewResultsId;


/**
 * ServiceImpl object for domain model class ViewResults.
 *
 * @see ViewResults
 */
@Service("School_DB.ViewResultsService")
@Validated
public class ViewResultsServiceImpl implements ViewResultsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ViewResultsServiceImpl.class);


    @Autowired
    @Qualifier("School_DB.ViewResultsDao")
    private WMGenericDao<ViewResults, ViewResultsId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ViewResults, ViewResultsId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "School_DBTransactionManager")
    @Override
    public ViewResults create(ViewResults viewResults) {
        LOGGER.debug("Creating a new ViewResults with information: {}", viewResults);

        ViewResults viewResultsCreated = this.wmGenericDao.create(viewResults);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(viewResultsCreated);
    }

    @Transactional(readOnly = true, value = "School_DBTransactionManager")
    @Override
    public ViewResults getById(ViewResultsId viewresultsId) {
        LOGGER.debug("Finding ViewResults by id: {}", viewresultsId);
        return this.wmGenericDao.findById(viewresultsId);
    }

    @Transactional(readOnly = true, value = "School_DBTransactionManager")
    @Override
    public ViewResults findById(ViewResultsId viewresultsId) {
        LOGGER.debug("Finding ViewResults by id: {}", viewresultsId);
        try {
            return this.wmGenericDao.findById(viewresultsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No ViewResults found with id: {}", viewresultsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "School_DBTransactionManager")
    @Override
    public List<ViewResults> findByMultipleIds(List<ViewResultsId> viewresultsIds, boolean orderedReturn) {
        LOGGER.debug("Finding ViewResults by ids: {}", viewresultsIds);

        return this.wmGenericDao.findByMultipleIds(viewresultsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "School_DBTransactionManager")
    @Override
    public ViewResults update(ViewResults viewResults) {
        LOGGER.debug("Updating ViewResults with information: {}", viewResults);

        this.wmGenericDao.update(viewResults);
        this.wmGenericDao.refresh(viewResults);

        return viewResults;
    }

    @Transactional(value = "School_DBTransactionManager")
    @Override
    public ViewResults delete(ViewResultsId viewresultsId) {
        LOGGER.debug("Deleting ViewResults with id: {}", viewresultsId);
        ViewResults deleted = this.wmGenericDao.findById(viewresultsId);
        if (deleted == null) {
            LOGGER.debug("No ViewResults found with id: {}", viewresultsId);
            throw new EntityNotFoundException(String.valueOf(viewresultsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "School_DBTransactionManager")
    @Override
    public void delete(ViewResults viewResults) {
        LOGGER.debug("Deleting ViewResults with {}", viewResults);
        this.wmGenericDao.delete(viewResults);
    }

    @Transactional(readOnly = true, value = "School_DBTransactionManager")
    @Override
    public Page<ViewResults> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ViewResults");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "School_DBTransactionManager")
    @Override
    public Page<ViewResults> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ViewResults");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "School_DBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service School_DB for table ViewResults to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "School_DBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service School_DB for table ViewResults to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "School_DBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "School_DBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}