/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.dbofflinestorage.offlinedatabasedefined;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonProperty.Access;

/**
 * One2oneC generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`ONE2ONE_C`")
public class One2oneC implements Serializable {

    private Integer cid;
    private Date dateCol;
    private Time timeCol;
    private String charCol;
    @JsonProperty(access = Access.READ_ONLY)
    private byte[] blobCol;
    private LocalDateTime datetimeCol;
    private Timestamp timestampCol;
    private One2oneP one2oneP;

    @Id
    @Column(name = "`C_ID`", nullable = false, scale = 0, precision = 10)
    public Integer getCid() {
        return this.cid;
    }

    public void setCid(Integer cid) {
        this.cid = cid;
    }

    @Column(name = "`DATE_COL`", nullable = true)
    public Date getDateCol() {
        return this.dateCol;
    }

    public void setDateCol(Date dateCol) {
        this.dateCol = dateCol;
    }

    @Column(name = "`TIME_COL`", nullable = true)
    public Time getTimeCol() {
        return this.timeCol;
    }

    public void setTimeCol(Time timeCol) {
        this.timeCol = timeCol;
    }

    @Column(name = "`CHAR_COL`", nullable = true, length = 1)
    public String getCharCol() {
        return this.charCol;
    }

    public void setCharCol(String charCol) {
        this.charCol = charCol;
    }

    @Column(name = "`BLOB_COL`", nullable = true)
    public byte[] getBlobCol() {
        return this.blobCol;
    }

    public void setBlobCol(byte[] blobCol) {
        this.blobCol = blobCol;
    }

    @Column(name = "`Datetime Col`", nullable = true)
    public LocalDateTime getDatetimeCol() {
        return this.datetimeCol;
    }

    public void setDatetimeCol(LocalDateTime datetimeCol) {
        this.datetimeCol = datetimeCol;
    }

    @Column(name = "`Timestamp Col`", nullable = true)
    public Timestamp getTimestampCol() {
        return this.timestampCol;
    }

    public void setTimestampCol(Timestamp timestampCol) {
        this.timestampCol = timestampCol;
    }

    @OneToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`C_ID`", referencedColumnName = "`P_ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_ONE2ONE_C_TO_ONE2ONE_fYcwl`"))
    @Fetch(FetchMode.JOIN)
    public One2oneP getOne2oneP() {
        return this.one2oneP;
    }

    public void setOne2oneP(One2oneP one2oneP) {
        if(one2oneP != null) {
            this.cid = one2oneP.getPid();
        }

        this.one2oneP = one2oneP;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof One2oneC)) return false;
        final One2oneC one2oneC = (One2oneC) o;
        return Objects.equals(getCid(), one2oneC.getCid());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getCid());
    }
}