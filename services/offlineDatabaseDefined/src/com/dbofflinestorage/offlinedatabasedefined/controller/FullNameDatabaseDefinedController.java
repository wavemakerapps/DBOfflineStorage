/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.dbofflinestorage.offlinedatabasedefined.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.dbofflinestorage.offlinedatabasedefined.FullNameDatabaseDefined;
import com.dbofflinestorage.offlinedatabasedefined.service.FullNameDatabaseDefinedService;


/**
 * Controller object for domain model class FullNameDatabaseDefined.
 * @see FullNameDatabaseDefined
 */
@RestController("offlineDatabaseDefined.FullNameDatabaseDefinedController")
@Api(value = "FullNameDatabaseDefinedController", description = "Exposes APIs to work with FullNameDatabaseDefined resource.")
@RequestMapping("/offlineDatabaseDefined/FullNameDatabaseDefined")
public class FullNameDatabaseDefinedController {

    private static final Logger LOGGER = LoggerFactory.getLogger(FullNameDatabaseDefinedController.class);

    @Autowired
	@Qualifier("offlineDatabaseDefined.FullNameDatabaseDefinedService")
	private FullNameDatabaseDefinedService fullNameDatabaseDefinedService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new FullNameDatabaseDefined instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public FullNameDatabaseDefined createFullNameDatabaseDefined(@RequestBody FullNameDatabaseDefined fullNameDatabaseDefined) {
		LOGGER.debug("Create FullNameDatabaseDefined with information: {}" , fullNameDatabaseDefined);

		fullNameDatabaseDefined = fullNameDatabaseDefinedService.create(fullNameDatabaseDefined);
		LOGGER.debug("Created FullNameDatabaseDefined with information: {}" , fullNameDatabaseDefined);

	    return fullNameDatabaseDefined;
	}

    @ApiOperation(value = "Returns the FullNameDatabaseDefined instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public FullNameDatabaseDefined getFullNameDatabaseDefined(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting FullNameDatabaseDefined with id: {}" , id);

        FullNameDatabaseDefined foundFullNameDatabaseDefined = fullNameDatabaseDefinedService.getById(id);
        LOGGER.debug("FullNameDatabaseDefined details with id: {}" , foundFullNameDatabaseDefined);

        return foundFullNameDatabaseDefined;
    }

    @ApiOperation(value = "Updates the FullNameDatabaseDefined instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public FullNameDatabaseDefined editFullNameDatabaseDefined(@PathVariable("id") Integer id, @RequestBody FullNameDatabaseDefined fullNameDatabaseDefined) {
        LOGGER.debug("Editing FullNameDatabaseDefined with id: {}" , fullNameDatabaseDefined.getId());

        fullNameDatabaseDefined.setId(id);
        fullNameDatabaseDefined = fullNameDatabaseDefinedService.update(fullNameDatabaseDefined);
        LOGGER.debug("FullNameDatabaseDefined details with id: {}" , fullNameDatabaseDefined);

        return fullNameDatabaseDefined;
    }

    @ApiOperation(value = "Deletes the FullNameDatabaseDefined instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteFullNameDatabaseDefined(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting FullNameDatabaseDefined with id: {}" , id);

        FullNameDatabaseDefined deletedFullNameDatabaseDefined = fullNameDatabaseDefinedService.delete(id);

        return deletedFullNameDatabaseDefined != null;
    }

    /**
     * @deprecated Use {@link #findFullNameDatabaseDefineds(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of FullNameDatabaseDefined instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<FullNameDatabaseDefined> searchFullNameDatabaseDefinedsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering FullNameDatabaseDefineds list by query filter:{}", (Object) queryFilters);
        return fullNameDatabaseDefinedService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of FullNameDatabaseDefined instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<FullNameDatabaseDefined> findFullNameDatabaseDefineds(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering FullNameDatabaseDefineds list by filter:", query);
        return fullNameDatabaseDefinedService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of FullNameDatabaseDefined instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<FullNameDatabaseDefined> filterFullNameDatabaseDefineds(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering FullNameDatabaseDefineds list by filter", query);
        return fullNameDatabaseDefinedService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportFullNameDatabaseDefineds(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return fullNameDatabaseDefinedService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportFullNameDatabaseDefinedsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = FullNameDatabaseDefined.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> fullNameDatabaseDefinedService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of FullNameDatabaseDefined instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countFullNameDatabaseDefineds( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting FullNameDatabaseDefineds");
		return fullNameDatabaseDefinedService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getFullNameDatabaseDefinedAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return fullNameDatabaseDefinedService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service FullNameDatabaseDefinedService instance
	 */
	protected void setFullNameDatabaseDefinedService(FullNameDatabaseDefinedService service) {
		this.fullNameDatabaseDefinedService = service;
	}

}