/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.dbofflinestorage.offlinedatabasedefined.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.dbofflinestorage.offlinedatabasedefined.ValidatorsTable;
import com.dbofflinestorage.offlinedatabasedefined.service.ValidatorsTableService;


/**
 * Controller object for domain model class ValidatorsTable.
 * @see ValidatorsTable
 */
@RestController("offlineDatabaseDefined.ValidatorsTableController")
@Api(value = "ValidatorsTableController", description = "Exposes APIs to work with ValidatorsTable resource.")
@RequestMapping("/offlineDatabaseDefined/ValidatorsTable")
public class ValidatorsTableController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ValidatorsTableController.class);

    @Autowired
	@Qualifier("offlineDatabaseDefined.ValidatorsTableService")
	private ValidatorsTableService validatorsTableService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new ValidatorsTable instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ValidatorsTable createValidatorsTable(@RequestBody ValidatorsTable validatorsTable) {
		LOGGER.debug("Create ValidatorsTable with information: {}" , validatorsTable);

		validatorsTable = validatorsTableService.create(validatorsTable);
		LOGGER.debug("Created ValidatorsTable with information: {}" , validatorsTable);

	    return validatorsTable;
	}

    @ApiOperation(value = "Returns the ValidatorsTable instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ValidatorsTable getValidatorsTable(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting ValidatorsTable with id: {}" , id);

        ValidatorsTable foundValidatorsTable = validatorsTableService.getById(id);
        LOGGER.debug("ValidatorsTable details with id: {}" , foundValidatorsTable);

        return foundValidatorsTable;
    }

    @ApiOperation(value = "Updates the ValidatorsTable instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ValidatorsTable editValidatorsTable(@PathVariable("id") Integer id, @RequestBody ValidatorsTable validatorsTable) {
        LOGGER.debug("Editing ValidatorsTable with id: {}" , validatorsTable.getId());

        validatorsTable.setId(id);
        validatorsTable = validatorsTableService.update(validatorsTable);
        LOGGER.debug("ValidatorsTable details with id: {}" , validatorsTable);

        return validatorsTable;
    }

    @ApiOperation(value = "Deletes the ValidatorsTable instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteValidatorsTable(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting ValidatorsTable with id: {}" , id);

        ValidatorsTable deletedValidatorsTable = validatorsTableService.delete(id);

        return deletedValidatorsTable != null;
    }

    /**
     * @deprecated Use {@link #findValidatorsTables(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of ValidatorsTable instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<ValidatorsTable> searchValidatorsTablesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ValidatorsTables list by query filter:{}", (Object) queryFilters);
        return validatorsTableService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ValidatorsTable instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ValidatorsTable> findValidatorsTables(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ValidatorsTables list by filter:", query);
        return validatorsTableService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ValidatorsTable instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<ValidatorsTable> filterValidatorsTables(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ValidatorsTables list by filter", query);
        return validatorsTableService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportValidatorsTables(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return validatorsTableService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportValidatorsTablesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = ValidatorsTable.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> validatorsTableService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of ValidatorsTable instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countValidatorsTables( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting ValidatorsTables");
		return validatorsTableService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getValidatorsTableAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return validatorsTableService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ValidatorsTableService instance
	 */
	protected void setValidatorsTableService(ValidatorsTableService service) {
		this.validatorsTableService = service;
	}

}