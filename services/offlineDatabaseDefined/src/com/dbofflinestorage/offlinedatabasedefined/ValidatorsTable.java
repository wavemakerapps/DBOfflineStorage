/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.dbofflinestorage.offlinedatabasedefined;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.math.BigDecimal;
import java.sql.Date;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.validation.constraints.AssertFalse;
import javax.validation.constraints.AssertTrue;
import javax.validation.constraints.DecimalMax;
import javax.validation.constraints.DecimalMin;
import javax.validation.constraints.Future;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.Past;

import org.hibernate.validator.constraints.CreditCardNumber;
import org.hibernate.validator.constraints.Email;
import org.hibernate.validator.constraints.Length;
import org.hibernate.validator.constraints.Range;

import com.wavemaker.runtime.constraints.DecimalRange;

/**
 * ValidatorsTable generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`Validators Table`")
public class ValidatorsTable implements Serializable {

    private Integer id;
@Min(value = 10)
    private Byte byteCol;
@Max(value = 100)
    private Integer shortCol;
@Range(min = 10,max = 100)
    private Integer integerCol;
@DecimalMin(value = "100.100")
    private Float floatCol;
@DecimalMax(value = "1000.1000")
    private Double doubleCol;
@DecimalRange(min = "100.100",max = "1000.1000")
    private BigDecimal bigDecCol;
@CreditCardNumber()
    private String creditCardPattern;
@Length(min = 2,max = 5)
    private String stringLengthMin2max5;
@Email(regexp = ".*")
    private String emailString;
@Future()
    private Date futureDate;
@Past()
    private Date pastDate;
@Future()
    private Timestamp futureTimestamp;
@Past()
    private Timestamp pastTimestamp;
@AssertTrue()
    private Boolean assertTrueBoolean;
@AssertFalse()
    private Boolean assertFalseBoolean;
    private LocalDateTime datetimeCol;
    private Timestamp timestampCol;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`ID`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`ByteCol`", nullable = true, scale = 0, precision = 3)
    public Byte getByteCol() {
        return this.byteCol;
    }

    public void setByteCol(Byte byteCol) {
        this.byteCol = byteCol;
    }

    @Column(name = "`ShortCol`", nullable = true, scale = 0, precision = 10)
    public Integer getShortCol() {
        return this.shortCol;
    }

    public void setShortCol(Integer shortCol) {
        this.shortCol = shortCol;
    }

    @Column(name = "`IntegerCol`", nullable = true, scale = 0, precision = 10)
    public Integer getIntegerCol() {
        return this.integerCol;
    }

    public void setIntegerCol(Integer integerCol) {
        this.integerCol = integerCol;
    }

    @Column(name = "`FloatCol`", nullable = true, scale = 4, precision = 8)
    public Float getFloatCol() {
        return this.floatCol;
    }

    public void setFloatCol(Float floatCol) {
        this.floatCol = floatCol;
    }

    @Column(name = "`DoubleCol`", nullable = true, scale = 8, precision = 18)
    public Double getDoubleCol() {
        return this.doubleCol;
    }

    public void setDoubleCol(Double doubleCol) {
        this.doubleCol = doubleCol;
    }

    @Column(name = "`BigDecCol`", nullable = true, scale = 15, precision = 35)
    public BigDecimal getBigDecCol() {
        return this.bigDecCol;
    }

    public void setBigDecCol(BigDecimal bigDecCol) {
        this.bigDecCol = bigDecCol;
    }

    @Column(name = "`CreditCardPattern`", nullable = true, length = 255)
    public String getCreditCardPattern() {
        return this.creditCardPattern;
    }

    public void setCreditCardPattern(String creditCardPattern) {
        this.creditCardPattern = creditCardPattern;
    }

    @Column(name = "`StringLengthMin2Max5`", nullable = true, length = 255)
    public String getStringLengthMin2max5() {
        return this.stringLengthMin2max5;
    }

    public void setStringLengthMin2max5(String stringLengthMin2max5) {
        this.stringLengthMin2max5 = stringLengthMin2max5;
    }

    @Column(name = "`EmailString`", nullable = true, length = 255)
    public String getEmailString() {
        return this.emailString;
    }

    public void setEmailString(String emailString) {
        this.emailString = emailString;
    }

    @Column(name = "`FutureDate`", nullable = true)
    public Date getFutureDate() {
        return this.futureDate;
    }

    public void setFutureDate(Date futureDate) {
        this.futureDate = futureDate;
    }

    @Column(name = "`PastDate`", nullable = true)
    public Date getPastDate() {
        return this.pastDate;
    }

    public void setPastDate(Date pastDate) {
        this.pastDate = pastDate;
    }

    @Column(name = "`Future Timestamp`", nullable = true)
    public Timestamp getFutureTimestamp() {
        return this.futureTimestamp;
    }

    public void setFutureTimestamp(Timestamp futureTimestamp) {
        this.futureTimestamp = futureTimestamp;
    }

    @Column(name = "`Past Timestamp`", nullable = true)
    public Timestamp getPastTimestamp() {
        return this.pastTimestamp;
    }

    public void setPastTimestamp(Timestamp pastTimestamp) {
        this.pastTimestamp = pastTimestamp;
    }

    @Column(name = "`AssertTrueBoolean`", nullable = true)
    public Boolean getAssertTrueBoolean() {
        return this.assertTrueBoolean;
    }

    public void setAssertTrueBoolean(Boolean assertTrueBoolean) {
        this.assertTrueBoolean = assertTrueBoolean;
    }

    @Column(name = "`AssertFalseBoolean`", nullable = true)
    public Boolean getAssertFalseBoolean() {
        return this.assertFalseBoolean;
    }

    public void setAssertFalseBoolean(Boolean assertFalseBoolean) {
        this.assertFalseBoolean = assertFalseBoolean;
    }

    @Column(name = "`Datetime Col`", nullable = true)
    public LocalDateTime getDatetimeCol() {
        return this.datetimeCol;
    }

    public void setDatetimeCol(LocalDateTime datetimeCol) {
        this.datetimeCol = datetimeCol;
    }

    @Column(name = "`Timestamp Col`", nullable = true)
    public Timestamp getTimestampCol() {
        return this.timestampCol;
    }

    public void setTimestampCol(Timestamp timestampCol) {
        this.timestampCol = timestampCol;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ValidatorsTable)) return false;
        final ValidatorsTable validatorsTable = (ValidatorsTable) o;
        return Objects.equals(getId(), validatorsTable.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}