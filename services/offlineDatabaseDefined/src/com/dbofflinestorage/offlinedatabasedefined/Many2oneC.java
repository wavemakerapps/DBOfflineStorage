/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.dbofflinestorage.offlinedatabasedefined;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.sql.Time;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * Many2oneC generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`MANY2ONE_C`")
public class Many2oneC implements Serializable {

    private Integer pkId;
    private String cid;
    private String textCol;
    private Time timeCol;
    private LocalDateTime datetimeCol;
    private Timestamp timestampCol;
    private One2manyP one2manyP;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`PK_ID`", nullable = false, scale = 0, precision = 10)
    public Integer getPkId() {
        return this.pkId;
    }

    public void setPkId(Integer pkId) {
        this.pkId = pkId;
    }

    @Column(name = "`C_ID`", nullable = true, length = 255)
    public String getCid() {
        return this.cid;
    }

    public void setCid(String cid) {
        this.cid = cid;
    }

    @Column(name = "`TEXT_COL`", nullable = true, length = 2147483647)
    public String getTextCol() {
        return this.textCol;
    }

    public void setTextCol(String textCol) {
        this.textCol = textCol;
    }

    @Column(name = "`TIME_COL`", nullable = true)
    public Time getTimeCol() {
        return this.timeCol;
    }

    public void setTimeCol(Time timeCol) {
        this.timeCol = timeCol;
    }

    @Column(name = "`Datetime Col`", nullable = true)
    public LocalDateTime getDatetimeCol() {
        return this.datetimeCol;
    }

    public void setDatetimeCol(LocalDateTime datetimeCol) {
        this.datetimeCol = datetimeCol;
    }

    @Column(name = "`Timestamp Col`", nullable = true)
    public Timestamp getTimestampCol() {
        return this.timestampCol;
    }

    public void setTimestampCol(Timestamp timestampCol) {
        this.timestampCol = timestampCol;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`C_ID`", referencedColumnName = "`P_ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_MANY2ONE_C_TO_ONE2MANDTU8R`"))
    @Fetch(FetchMode.JOIN)
    public One2manyP getOne2manyP() {
        return this.one2manyP;
    }

    public void setOne2manyP(One2manyP one2manyP) {
        if(one2manyP != null) {
            this.cid = one2manyP.getPid();
        }

        this.one2manyP = one2manyP;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Many2oneC)) return false;
        final Many2oneC many2oneC = (Many2oneC) o;
        return Objects.equals(getPkId(), many2oneC.getPkId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getPkId());
    }
}