/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.dbofflinestorage.offlinedatabasedefined.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dbofflinestorage.offlinedatabasedefined.Many2oneC;

/**
 * Service object for domain model class {@link Many2oneC}.
 */
public interface Many2oneCService {

    /**
     * Creates a new Many2oneC. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Many2oneC if any.
     *
     * @param many2oneC Details of the Many2oneC to be created; value cannot be null.
     * @return The newly created Many2oneC.
     */
    Many2oneC create(@Valid Many2oneC many2oneC);


	/**
     * Returns Many2oneC by given id if exists.
     *
     * @param many2onecId The id of the Many2oneC to get; value cannot be null.
     * @return Many2oneC associated with the given many2onecId.
	 * @throws EntityNotFoundException If no Many2oneC is found.
     */
    Many2oneC getById(Integer many2onecId);

    /**
     * Find and return the Many2oneC by given id if exists, returns null otherwise.
     *
     * @param many2onecId The id of the Many2oneC to get; value cannot be null.
     * @return Many2oneC associated with the given many2onecId.
     */
    Many2oneC findById(Integer many2onecId);

	/**
     * Find and return the list of Many2oneCs by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param many2onecIds The id's of the Many2oneC to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Many2oneCs associated with the given many2onecIds.
     */
    List<Many2oneC> findByMultipleIds(List<Integer> many2onecIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Many2oneC. It replaces all fields of the existing Many2oneC with the given many2oneC.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Many2oneC if any.
     *
     * @param many2oneC The details of the Many2oneC to be updated; value cannot be null.
     * @return The updated Many2oneC.
     * @throws EntityNotFoundException if no Many2oneC is found with given input.
     */
    Many2oneC update(@Valid Many2oneC many2oneC);

    /**
     * Deletes an existing Many2oneC with the given id.
     *
     * @param many2onecId The id of the Many2oneC to be deleted; value cannot be null.
     * @return The deleted Many2oneC.
     * @throws EntityNotFoundException if no Many2oneC found with the given id.
     */
    Many2oneC delete(Integer many2onecId);

    /**
     * Deletes an existing Many2oneC with the given object.
     *
     * @param many2oneC The instance of the Many2oneC to be deleted; value cannot be null.
     */
    void delete(Many2oneC many2oneC);

    /**
     * Find all Many2oneCs matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Many2oneCs.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Many2oneC> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Many2oneCs matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Many2oneCs.
     *
     * @see Pageable
     * @see Page
     */
    Page<Many2oneC> findAll(String query, Pageable pageable);

    /**
     * Exports all Many2oneCs matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Many2oneCs matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Many2oneCs in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Many2oneC.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}