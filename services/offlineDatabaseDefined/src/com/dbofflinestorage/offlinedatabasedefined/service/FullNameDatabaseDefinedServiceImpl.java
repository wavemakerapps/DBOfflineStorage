/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.dbofflinestorage.offlinedatabasedefined.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dbofflinestorage.offlinedatabasedefined.FullNameDatabaseDefined;


/**
 * ServiceImpl object for domain model class FullNameDatabaseDefined.
 *
 * @see FullNameDatabaseDefined
 */
@Service("offlineDatabaseDefined.FullNameDatabaseDefinedService")
@Validated
public class FullNameDatabaseDefinedServiceImpl implements FullNameDatabaseDefinedService {

    private static final Logger LOGGER = LoggerFactory.getLogger(FullNameDatabaseDefinedServiceImpl.class);


    @Autowired
    @Qualifier("offlineDatabaseDefined.FullNameDatabaseDefinedDao")
    private WMGenericDao<FullNameDatabaseDefined, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<FullNameDatabaseDefined, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public FullNameDatabaseDefined create(FullNameDatabaseDefined fullNameDatabaseDefined) {
        LOGGER.debug("Creating a new FullNameDatabaseDefined with information: {}", fullNameDatabaseDefined);

        FullNameDatabaseDefined fullNameDatabaseDefinedCreated = this.wmGenericDao.create(fullNameDatabaseDefined);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(fullNameDatabaseDefinedCreated);
    }

    @Transactional(readOnly = true, value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public FullNameDatabaseDefined getById(Integer fullnamedatabasedefinedId) {
        LOGGER.debug("Finding FullNameDatabaseDefined by id: {}", fullnamedatabasedefinedId);
        return this.wmGenericDao.findById(fullnamedatabasedefinedId);
    }

    @Transactional(readOnly = true, value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public FullNameDatabaseDefined findById(Integer fullnamedatabasedefinedId) {
        LOGGER.debug("Finding FullNameDatabaseDefined by id: {}", fullnamedatabasedefinedId);
        try {
            return this.wmGenericDao.findById(fullnamedatabasedefinedId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No FullNameDatabaseDefined found with id: {}", fullnamedatabasedefinedId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public List<FullNameDatabaseDefined> findByMultipleIds(List<Integer> fullnamedatabasedefinedIds, boolean orderedReturn) {
        LOGGER.debug("Finding FullNameDatabaseDefineds by ids: {}", fullnamedatabasedefinedIds);

        return this.wmGenericDao.findByMultipleIds(fullnamedatabasedefinedIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public FullNameDatabaseDefined update(FullNameDatabaseDefined fullNameDatabaseDefined) {
        LOGGER.debug("Updating FullNameDatabaseDefined with information: {}", fullNameDatabaseDefined);

        this.wmGenericDao.update(fullNameDatabaseDefined);
        this.wmGenericDao.refresh(fullNameDatabaseDefined);

        return fullNameDatabaseDefined;
    }

    @Transactional(value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public FullNameDatabaseDefined delete(Integer fullnamedatabasedefinedId) {
        LOGGER.debug("Deleting FullNameDatabaseDefined with id: {}", fullnamedatabasedefinedId);
        FullNameDatabaseDefined deleted = this.wmGenericDao.findById(fullnamedatabasedefinedId);
        if (deleted == null) {
            LOGGER.debug("No FullNameDatabaseDefined found with id: {}", fullnamedatabasedefinedId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), FullNameDatabaseDefined.class.getSimpleName(), fullnamedatabasedefinedId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public void delete(FullNameDatabaseDefined fullNameDatabaseDefined) {
        LOGGER.debug("Deleting FullNameDatabaseDefined with {}", fullNameDatabaseDefined);
        this.wmGenericDao.delete(fullNameDatabaseDefined);
    }

    @Transactional(readOnly = true, value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public Page<FullNameDatabaseDefined> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all FullNameDatabaseDefineds");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public Page<FullNameDatabaseDefined> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all FullNameDatabaseDefineds");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "offlineDatabaseDefinedTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service offlineDatabaseDefined for table FullNameDatabaseDefined to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "offlineDatabaseDefinedTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service offlineDatabaseDefined for table FullNameDatabaseDefined to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}