/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.dbofflinestorage.offlinedatabasedefined.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dbofflinestorage.offlinedatabasedefined.FullNameDatabaseDefined;

/**
 * Service object for domain model class {@link FullNameDatabaseDefined}.
 */
public interface FullNameDatabaseDefinedService {

    /**
     * Creates a new FullNameDatabaseDefined. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on FullNameDatabaseDefined if any.
     *
     * @param fullNameDatabaseDefined Details of the FullNameDatabaseDefined to be created; value cannot be null.
     * @return The newly created FullNameDatabaseDefined.
     */
    FullNameDatabaseDefined create(@Valid FullNameDatabaseDefined fullNameDatabaseDefined);


	/**
     * Returns FullNameDatabaseDefined by given id if exists.
     *
     * @param fullnamedatabasedefinedId The id of the FullNameDatabaseDefined to get; value cannot be null.
     * @return FullNameDatabaseDefined associated with the given fullnamedatabasedefinedId.
	 * @throws EntityNotFoundException If no FullNameDatabaseDefined is found.
     */
    FullNameDatabaseDefined getById(Integer fullnamedatabasedefinedId);

    /**
     * Find and return the FullNameDatabaseDefined by given id if exists, returns null otherwise.
     *
     * @param fullnamedatabasedefinedId The id of the FullNameDatabaseDefined to get; value cannot be null.
     * @return FullNameDatabaseDefined associated with the given fullnamedatabasedefinedId.
     */
    FullNameDatabaseDefined findById(Integer fullnamedatabasedefinedId);

	/**
     * Find and return the list of FullNameDatabaseDefineds by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param fullnamedatabasedefinedIds The id's of the FullNameDatabaseDefined to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return FullNameDatabaseDefineds associated with the given fullnamedatabasedefinedIds.
     */
    List<FullNameDatabaseDefined> findByMultipleIds(List<Integer> fullnamedatabasedefinedIds, boolean orderedReturn);


    /**
     * Updates the details of an existing FullNameDatabaseDefined. It replaces all fields of the existing FullNameDatabaseDefined with the given fullNameDatabaseDefined.
     *
     * This method overrides the input field values using Server side or database managed properties defined on FullNameDatabaseDefined if any.
     *
     * @param fullNameDatabaseDefined The details of the FullNameDatabaseDefined to be updated; value cannot be null.
     * @return The updated FullNameDatabaseDefined.
     * @throws EntityNotFoundException if no FullNameDatabaseDefined is found with given input.
     */
    FullNameDatabaseDefined update(@Valid FullNameDatabaseDefined fullNameDatabaseDefined);

    /**
     * Deletes an existing FullNameDatabaseDefined with the given id.
     *
     * @param fullnamedatabasedefinedId The id of the FullNameDatabaseDefined to be deleted; value cannot be null.
     * @return The deleted FullNameDatabaseDefined.
     * @throws EntityNotFoundException if no FullNameDatabaseDefined found with the given id.
     */
    FullNameDatabaseDefined delete(Integer fullnamedatabasedefinedId);

    /**
     * Deletes an existing FullNameDatabaseDefined with the given object.
     *
     * @param fullNameDatabaseDefined The instance of the FullNameDatabaseDefined to be deleted; value cannot be null.
     */
    void delete(FullNameDatabaseDefined fullNameDatabaseDefined);

    /**
     * Find all FullNameDatabaseDefineds matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching FullNameDatabaseDefineds.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<FullNameDatabaseDefined> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all FullNameDatabaseDefineds matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching FullNameDatabaseDefineds.
     *
     * @see Pageable
     * @see Page
     */
    Page<FullNameDatabaseDefined> findAll(String query, Pageable pageable);

    /**
     * Exports all FullNameDatabaseDefineds matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all FullNameDatabaseDefineds matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the FullNameDatabaseDefineds in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the FullNameDatabaseDefined.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}