/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.dbofflinestorage.offlinedatabasedefined.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dbofflinestorage.offlinedatabasedefined.DateDatabaseDefined;


/**
 * ServiceImpl object for domain model class DateDatabaseDefined.
 *
 * @see DateDatabaseDefined
 */
@Service("offlineDatabaseDefined.DateDatabaseDefinedService")
@Validated
public class DateDatabaseDefinedServiceImpl implements DateDatabaseDefinedService {

    private static final Logger LOGGER = LoggerFactory.getLogger(DateDatabaseDefinedServiceImpl.class);


    @Autowired
    @Qualifier("offlineDatabaseDefined.DateDatabaseDefinedDao")
    private WMGenericDao<DateDatabaseDefined, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<DateDatabaseDefined, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public DateDatabaseDefined create(DateDatabaseDefined dateDatabaseDefined) {
        LOGGER.debug("Creating a new DateDatabaseDefined with information: {}", dateDatabaseDefined);

        DateDatabaseDefined dateDatabaseDefinedCreated = this.wmGenericDao.create(dateDatabaseDefined);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(dateDatabaseDefinedCreated);
    }

    @Transactional(readOnly = true, value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public DateDatabaseDefined getById(Integer datedatabasedefinedId) {
        LOGGER.debug("Finding DateDatabaseDefined by id: {}", datedatabasedefinedId);
        return this.wmGenericDao.findById(datedatabasedefinedId);
    }

    @Transactional(readOnly = true, value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public DateDatabaseDefined findById(Integer datedatabasedefinedId) {
        LOGGER.debug("Finding DateDatabaseDefined by id: {}", datedatabasedefinedId);
        try {
            return this.wmGenericDao.findById(datedatabasedefinedId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No DateDatabaseDefined found with id: {}", datedatabasedefinedId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public List<DateDatabaseDefined> findByMultipleIds(List<Integer> datedatabasedefinedIds, boolean orderedReturn) {
        LOGGER.debug("Finding DateDatabaseDefineds by ids: {}", datedatabasedefinedIds);

        return this.wmGenericDao.findByMultipleIds(datedatabasedefinedIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public DateDatabaseDefined update(DateDatabaseDefined dateDatabaseDefined) {
        LOGGER.debug("Updating DateDatabaseDefined with information: {}", dateDatabaseDefined);

        this.wmGenericDao.update(dateDatabaseDefined);
        this.wmGenericDao.refresh(dateDatabaseDefined);

        return dateDatabaseDefined;
    }

    @Transactional(value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public DateDatabaseDefined delete(Integer datedatabasedefinedId) {
        LOGGER.debug("Deleting DateDatabaseDefined with id: {}", datedatabasedefinedId);
        DateDatabaseDefined deleted = this.wmGenericDao.findById(datedatabasedefinedId);
        if (deleted == null) {
            LOGGER.debug("No DateDatabaseDefined found with id: {}", datedatabasedefinedId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), DateDatabaseDefined.class.getSimpleName(), datedatabasedefinedId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public void delete(DateDatabaseDefined dateDatabaseDefined) {
        LOGGER.debug("Deleting DateDatabaseDefined with {}", dateDatabaseDefined);
        this.wmGenericDao.delete(dateDatabaseDefined);
    }

    @Transactional(readOnly = true, value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public Page<DateDatabaseDefined> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all DateDatabaseDefineds");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public Page<DateDatabaseDefined> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all DateDatabaseDefineds");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "offlineDatabaseDefinedTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service offlineDatabaseDefined for table DateDatabaseDefined to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "offlineDatabaseDefinedTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service offlineDatabaseDefined for table DateDatabaseDefined to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}