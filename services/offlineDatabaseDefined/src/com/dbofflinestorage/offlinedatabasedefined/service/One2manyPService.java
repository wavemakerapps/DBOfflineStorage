/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.dbofflinestorage.offlinedatabasedefined.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dbofflinestorage.offlinedatabasedefined.Many2oneC;
import com.dbofflinestorage.offlinedatabasedefined.One2manyP;

/**
 * Service object for domain model class {@link One2manyP}.
 */
public interface One2manyPService {

    /**
     * Creates a new One2manyP. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on One2manyP if any.
     *
     * @param one2manyP Details of the One2manyP to be created; value cannot be null.
     * @return The newly created One2manyP.
     */
    One2manyP create(@Valid One2manyP one2manyP);


	/**
     * Returns One2manyP by given id if exists.
     *
     * @param one2manypId The id of the One2manyP to get; value cannot be null.
     * @return One2manyP associated with the given one2manypId.
	 * @throws EntityNotFoundException If no One2manyP is found.
     */
    One2manyP getById(String one2manypId);

    /**
     * Find and return the One2manyP by given id if exists, returns null otherwise.
     *
     * @param one2manypId The id of the One2manyP to get; value cannot be null.
     * @return One2manyP associated with the given one2manypId.
     */
    One2manyP findById(String one2manypId);

	/**
     * Find and return the list of One2manyPs by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param one2manypIds The id's of the One2manyP to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return One2manyPs associated with the given one2manypIds.
     */
    List<One2manyP> findByMultipleIds(List<String> one2manypIds, boolean orderedReturn);


    /**
     * Updates the details of an existing One2manyP. It replaces all fields of the existing One2manyP with the given one2manyP.
     *
     * This method overrides the input field values using Server side or database managed properties defined on One2manyP if any.
     *
     * @param one2manyP The details of the One2manyP to be updated; value cannot be null.
     * @return The updated One2manyP.
     * @throws EntityNotFoundException if no One2manyP is found with given input.
     */
    One2manyP update(@Valid One2manyP one2manyP);

    /**
     * Deletes an existing One2manyP with the given id.
     *
     * @param one2manypId The id of the One2manyP to be deleted; value cannot be null.
     * @return The deleted One2manyP.
     * @throws EntityNotFoundException if no One2manyP found with the given id.
     */
    One2manyP delete(String one2manypId);

    /**
     * Deletes an existing One2manyP with the given object.
     *
     * @param one2manyP The instance of the One2manyP to be deleted; value cannot be null.
     */
    void delete(One2manyP one2manyP);

    /**
     * Find all One2manyPs matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching One2manyPs.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<One2manyP> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all One2manyPs matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching One2manyPs.
     *
     * @see Pageable
     * @see Page
     */
    Page<One2manyP> findAll(String query, Pageable pageable);

    /**
     * Exports all One2manyPs matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all One2manyPs matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the One2manyPs in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the One2manyP.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated many2oneCs for given One2manyP id.
     *
     * @param pid value of pid; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Many2oneC instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Many2oneC> findAssociatedMany2oneCs(String pid, Pageable pageable);

}