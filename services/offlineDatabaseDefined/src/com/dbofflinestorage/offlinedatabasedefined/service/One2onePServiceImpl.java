/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.dbofflinestorage.offlinedatabasedefined.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.hibernate.Hibernate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dbofflinestorage.offlinedatabasedefined.One2oneC;
import com.dbofflinestorage.offlinedatabasedefined.One2oneP;


/**
 * ServiceImpl object for domain model class One2oneP.
 *
 * @see One2oneP
 */
@Service("offlineDatabaseDefined.One2onePService")
@Validated
public class One2onePServiceImpl implements One2onePService {

    private static final Logger LOGGER = LoggerFactory.getLogger(One2onePServiceImpl.class);


    @Autowired
    @Qualifier("offlineDatabaseDefined.One2onePDao")
    private WMGenericDao<One2oneP, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<One2oneP, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public One2oneP create(One2oneP one2oneP) {
        LOGGER.debug("Creating a new One2oneP with information: {}", one2oneP);

        One2oneP one2onePCreated = this.wmGenericDao.create(one2oneP);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(one2onePCreated);
    }

    @Transactional(readOnly = true, value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public One2oneP getById(Integer one2onepId) {
        LOGGER.debug("Finding One2oneP by id: {}", one2onepId);
        return this.wmGenericDao.findById(one2onepId);
    }

    @Transactional(readOnly = true, value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public One2oneP findById(Integer one2onepId) {
        LOGGER.debug("Finding One2oneP by id: {}", one2onepId);
        try {
            return this.wmGenericDao.findById(one2onepId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No One2oneP found with id: {}", one2onepId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public List<One2oneP> findByMultipleIds(List<Integer> one2onepIds, boolean orderedReturn) {
        LOGGER.debug("Finding One2onePs by ids: {}", one2onepIds);

        return this.wmGenericDao.findByMultipleIds(one2onepIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public One2oneP update(One2oneP one2oneP) {
        LOGGER.debug("Updating One2oneP with information: {}", one2oneP);

        One2oneC one2oneC = one2oneP.getOne2oneC();
        if(one2oneC != null && Hibernate.isInitialized(one2oneC)) {
            one2oneC.setOne2oneP(one2oneP);
        }

        this.wmGenericDao.update(one2oneP);
        this.wmGenericDao.refresh(one2oneP);

        return one2oneP;
    }

    @Transactional(value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public One2oneP delete(Integer one2onepId) {
        LOGGER.debug("Deleting One2oneP with id: {}", one2onepId);
        One2oneP deleted = this.wmGenericDao.findById(one2onepId);
        if (deleted == null) {
            LOGGER.debug("No One2oneP found with id: {}", one2onepId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), One2oneP.class.getSimpleName(), one2onepId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public void delete(One2oneP one2oneP) {
        LOGGER.debug("Deleting One2oneP with {}", one2oneP);
        this.wmGenericDao.delete(one2oneP);
    }

    @Transactional(readOnly = true, value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public Page<One2oneP> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all One2onePs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public Page<One2oneP> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all One2onePs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "offlineDatabaseDefinedTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service offlineDatabaseDefined for table One2oneP to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "offlineDatabaseDefinedTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service offlineDatabaseDefined for table One2oneP to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}