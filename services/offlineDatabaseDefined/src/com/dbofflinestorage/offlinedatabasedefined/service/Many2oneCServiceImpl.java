/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.dbofflinestorage.offlinedatabasedefined.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dbofflinestorage.offlinedatabasedefined.Many2oneC;


/**
 * ServiceImpl object for domain model class Many2oneC.
 *
 * @see Many2oneC
 */
@Service("offlineDatabaseDefined.Many2oneCService")
@Validated
public class Many2oneCServiceImpl implements Many2oneCService {

    private static final Logger LOGGER = LoggerFactory.getLogger(Many2oneCServiceImpl.class);


    @Autowired
    @Qualifier("offlineDatabaseDefined.Many2oneCDao")
    private WMGenericDao<Many2oneC, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Many2oneC, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public Many2oneC create(Many2oneC many2oneC) {
        LOGGER.debug("Creating a new Many2oneC with information: {}", many2oneC);

        Many2oneC many2oneCCreated = this.wmGenericDao.create(many2oneC);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(many2oneCCreated);
    }

    @Transactional(readOnly = true, value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public Many2oneC getById(Integer many2onecId) {
        LOGGER.debug("Finding Many2oneC by id: {}", many2onecId);
        return this.wmGenericDao.findById(many2onecId);
    }

    @Transactional(readOnly = true, value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public Many2oneC findById(Integer many2onecId) {
        LOGGER.debug("Finding Many2oneC by id: {}", many2onecId);
        try {
            return this.wmGenericDao.findById(many2onecId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Many2oneC found with id: {}", many2onecId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public List<Many2oneC> findByMultipleIds(List<Integer> many2onecIds, boolean orderedReturn) {
        LOGGER.debug("Finding Many2oneCs by ids: {}", many2onecIds);

        return this.wmGenericDao.findByMultipleIds(many2onecIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public Many2oneC update(Many2oneC many2oneC) {
        LOGGER.debug("Updating Many2oneC with information: {}", many2oneC);

        this.wmGenericDao.update(many2oneC);
        this.wmGenericDao.refresh(many2oneC);

        return many2oneC;
    }

    @Transactional(value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public Many2oneC delete(Integer many2onecId) {
        LOGGER.debug("Deleting Many2oneC with id: {}", many2onecId);
        Many2oneC deleted = this.wmGenericDao.findById(many2onecId);
        if (deleted == null) {
            LOGGER.debug("No Many2oneC found with id: {}", many2onecId);
            throw new EntityNotFoundException(String.valueOf(many2onecId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public void delete(Many2oneC many2oneC) {
        LOGGER.debug("Deleting Many2oneC with {}", many2oneC);
        this.wmGenericDao.delete(many2oneC);
    }

    @Transactional(readOnly = true, value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public Page<Many2oneC> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Many2oneCs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public Page<Many2oneC> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Many2oneCs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "offlineDatabaseDefinedTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service offlineDatabaseDefined for table Many2oneC to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "offlineDatabaseDefinedTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service offlineDatabaseDefined for table Many2oneC to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}