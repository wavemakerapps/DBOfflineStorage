/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.dbofflinestorage.offlinedatabasedefined.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dbofflinestorage.offlinedatabasedefined.CurrentDate;


/**
 * ServiceImpl object for domain model class CurrentDate.
 *
 * @see CurrentDate
 */
@Service("offlineDatabaseDefined.CurrentDateService")
@Validated
public class CurrentDateServiceImpl implements CurrentDateService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CurrentDateServiceImpl.class);


    @Autowired
    @Qualifier("offlineDatabaseDefined.CurrentDateDao")
    private WMGenericDao<CurrentDate, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<CurrentDate, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public CurrentDate create(CurrentDate currentDate) {
        LOGGER.debug("Creating a new CurrentDate with information: {}", currentDate);

        CurrentDate currentDateCreated = this.wmGenericDao.create(currentDate);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(currentDateCreated);
    }

    @Transactional(readOnly = true, value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public CurrentDate getById(Integer currentdateId) {
        LOGGER.debug("Finding CurrentDate by id: {}", currentdateId);
        return this.wmGenericDao.findById(currentdateId);
    }

    @Transactional(readOnly = true, value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public CurrentDate findById(Integer currentdateId) {
        LOGGER.debug("Finding CurrentDate by id: {}", currentdateId);
        try {
            return this.wmGenericDao.findById(currentdateId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No CurrentDate found with id: {}", currentdateId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public List<CurrentDate> findByMultipleIds(List<Integer> currentdateIds, boolean orderedReturn) {
        LOGGER.debug("Finding CurrentDates by ids: {}", currentdateIds);

        return this.wmGenericDao.findByMultipleIds(currentdateIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public CurrentDate update(CurrentDate currentDate) {
        LOGGER.debug("Updating CurrentDate with information: {}", currentDate);

        this.wmGenericDao.update(currentDate);
        this.wmGenericDao.refresh(currentDate);

        return currentDate;
    }

    @Transactional(value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public CurrentDate delete(Integer currentdateId) {
        LOGGER.debug("Deleting CurrentDate with id: {}", currentdateId);
        CurrentDate deleted = this.wmGenericDao.findById(currentdateId);
        if (deleted == null) {
            LOGGER.debug("No CurrentDate found with id: {}", currentdateId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), CurrentDate.class.getSimpleName(), currentdateId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public void delete(CurrentDate currentDate) {
        LOGGER.debug("Deleting CurrentDate with {}", currentDate);
        this.wmGenericDao.delete(currentDate);
    }

    @Transactional(readOnly = true, value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public Page<CurrentDate> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all CurrentDates");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public Page<CurrentDate> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all CurrentDates");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "offlineDatabaseDefinedTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service offlineDatabaseDefined for table CurrentDate to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "offlineDatabaseDefinedTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service offlineDatabaseDefined for table CurrentDate to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "offlineDatabaseDefinedTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}