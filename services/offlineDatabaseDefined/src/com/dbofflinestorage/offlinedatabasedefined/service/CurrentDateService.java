/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.dbofflinestorage.offlinedatabasedefined.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dbofflinestorage.offlinedatabasedefined.CurrentDate;

/**
 * Service object for domain model class {@link CurrentDate}.
 */
public interface CurrentDateService {

    /**
     * Creates a new CurrentDate. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on CurrentDate if any.
     *
     * @param currentDate Details of the CurrentDate to be created; value cannot be null.
     * @return The newly created CurrentDate.
     */
    CurrentDate create(@Valid CurrentDate currentDate);


	/**
     * Returns CurrentDate by given id if exists.
     *
     * @param currentdateId The id of the CurrentDate to get; value cannot be null.
     * @return CurrentDate associated with the given currentdateId.
	 * @throws EntityNotFoundException If no CurrentDate is found.
     */
    CurrentDate getById(Integer currentdateId);

    /**
     * Find and return the CurrentDate by given id if exists, returns null otherwise.
     *
     * @param currentdateId The id of the CurrentDate to get; value cannot be null.
     * @return CurrentDate associated with the given currentdateId.
     */
    CurrentDate findById(Integer currentdateId);

	/**
     * Find and return the list of CurrentDates by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param currentdateIds The id's of the CurrentDate to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return CurrentDates associated with the given currentdateIds.
     */
    List<CurrentDate> findByMultipleIds(List<Integer> currentdateIds, boolean orderedReturn);


    /**
     * Updates the details of an existing CurrentDate. It replaces all fields of the existing CurrentDate with the given currentDate.
     *
     * This method overrides the input field values using Server side or database managed properties defined on CurrentDate if any.
     *
     * @param currentDate The details of the CurrentDate to be updated; value cannot be null.
     * @return The updated CurrentDate.
     * @throws EntityNotFoundException if no CurrentDate is found with given input.
     */
    CurrentDate update(@Valid CurrentDate currentDate);

    /**
     * Deletes an existing CurrentDate with the given id.
     *
     * @param currentdateId The id of the CurrentDate to be deleted; value cannot be null.
     * @return The deleted CurrentDate.
     * @throws EntityNotFoundException if no CurrentDate found with the given id.
     */
    CurrentDate delete(Integer currentdateId);

    /**
     * Deletes an existing CurrentDate with the given object.
     *
     * @param currentDate The instance of the CurrentDate to be deleted; value cannot be null.
     */
    void delete(CurrentDate currentDate);

    /**
     * Find all CurrentDates matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching CurrentDates.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<CurrentDate> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all CurrentDates matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching CurrentDates.
     *
     * @see Pageable
     * @see Page
     */
    Page<CurrentDate> findAll(String query, Pageable pageable);

    /**
     * Exports all CurrentDates matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all CurrentDates matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the CurrentDates in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the CurrentDate.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}