/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.dbofflinestorage.offlinedatabasedefined.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dbofflinestorage.offlinedatabasedefined.One2oneP;

/**
 * Service object for domain model class {@link One2oneP}.
 */
public interface One2onePService {

    /**
     * Creates a new One2oneP. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on One2oneP if any.
     *
     * @param one2oneP Details of the One2oneP to be created; value cannot be null.
     * @return The newly created One2oneP.
     */
    One2oneP create(@Valid One2oneP one2oneP);


	/**
     * Returns One2oneP by given id if exists.
     *
     * @param one2onepId The id of the One2oneP to get; value cannot be null.
     * @return One2oneP associated with the given one2onepId.
	 * @throws EntityNotFoundException If no One2oneP is found.
     */
    One2oneP getById(Integer one2onepId);

    /**
     * Find and return the One2oneP by given id if exists, returns null otherwise.
     *
     * @param one2onepId The id of the One2oneP to get; value cannot be null.
     * @return One2oneP associated with the given one2onepId.
     */
    One2oneP findById(Integer one2onepId);

	/**
     * Find and return the list of One2onePs by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param one2onepIds The id's of the One2oneP to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return One2onePs associated with the given one2onepIds.
     */
    List<One2oneP> findByMultipleIds(List<Integer> one2onepIds, boolean orderedReturn);


    /**
     * Updates the details of an existing One2oneP. It replaces all fields of the existing One2oneP with the given one2oneP.
     *
     * This method overrides the input field values using Server side or database managed properties defined on One2oneP if any.
     *
     * @param one2oneP The details of the One2oneP to be updated; value cannot be null.
     * @return The updated One2oneP.
     * @throws EntityNotFoundException if no One2oneP is found with given input.
     */
    One2oneP update(@Valid One2oneP one2oneP);

    /**
     * Deletes an existing One2oneP with the given id.
     *
     * @param one2onepId The id of the One2oneP to be deleted; value cannot be null.
     * @return The deleted One2oneP.
     * @throws EntityNotFoundException if no One2oneP found with the given id.
     */
    One2oneP delete(Integer one2onepId);

    /**
     * Deletes an existing One2oneP with the given object.
     *
     * @param one2oneP The instance of the One2oneP to be deleted; value cannot be null.
     */
    void delete(One2oneP one2oneP);

    /**
     * Find all One2onePs matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching One2onePs.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<One2oneP> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all One2onePs matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching One2onePs.
     *
     * @see Pageable
     * @see Page
     */
    Page<One2oneP> findAll(String query, Pageable pageable);

    /**
     * Exports all One2onePs matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all One2onePs matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the One2onePs in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the One2oneP.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}