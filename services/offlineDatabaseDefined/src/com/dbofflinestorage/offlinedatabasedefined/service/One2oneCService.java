/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.dbofflinestorage.offlinedatabasedefined.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dbofflinestorage.offlinedatabasedefined.One2oneC;

/**
 * Service object for domain model class {@link One2oneC}.
 */
public interface One2oneCService {

    /**
     * Creates a new One2oneC. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on One2oneC if any.
     *
     * @param one2oneC Details of the One2oneC to be created; value cannot be null.
     * @return The newly created One2oneC.
     */
    One2oneC create(@Valid One2oneC one2oneC);


	/**
     * Returns One2oneC by given id if exists.
     *
     * @param one2onecId The id of the One2oneC to get; value cannot be null.
     * @return One2oneC associated with the given one2onecId.
	 * @throws EntityNotFoundException If no One2oneC is found.
     */
    One2oneC getById(Integer one2onecId);

    /**
     * Find and return the One2oneC by given id if exists, returns null otherwise.
     *
     * @param one2onecId The id of the One2oneC to get; value cannot be null.
     * @return One2oneC associated with the given one2onecId.
     */
    One2oneC findById(Integer one2onecId);

	/**
     * Find and return the list of One2oneCs by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param one2onecIds The id's of the One2oneC to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return One2oneCs associated with the given one2onecIds.
     */
    List<One2oneC> findByMultipleIds(List<Integer> one2onecIds, boolean orderedReturn);


    /**
     * Updates the details of an existing One2oneC. It replaces all fields of the existing One2oneC with the given one2oneC.
     *
     * This method overrides the input field values using Server side or database managed properties defined on One2oneC if any.
     *
     * @param one2oneC The details of the One2oneC to be updated; value cannot be null.
     * @return The updated One2oneC.
     * @throws EntityNotFoundException if no One2oneC is found with given input.
     */
    One2oneC update(@Valid One2oneC one2oneC);

    /**
     * Deletes an existing One2oneC with the given id.
     *
     * @param one2onecId The id of the One2oneC to be deleted; value cannot be null.
     * @return The deleted One2oneC.
     * @throws EntityNotFoundException if no One2oneC found with the given id.
     */
    One2oneC delete(Integer one2onecId);

    /**
     * Deletes an existing One2oneC with the given object.
     *
     * @param one2oneC The instance of the One2oneC to be deleted; value cannot be null.
     */
    void delete(One2oneC one2oneC);

    /**
     * Find all One2oneCs matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching One2oneCs.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<One2oneC> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all One2oneCs matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching One2oneCs.
     *
     * @see Pageable
     * @see Page
     */
    Page<One2oneC> findAll(String query, Pageable pageable);

    /**
     * Exports all One2oneCs matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all One2oneCs matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the One2oneCs in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the One2oneC.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}