/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.dbofflinestorage.offlineclassicdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.InputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
import org.springframework.web.util.UriComponentsBuilder;

import com.fasterxml.jackson.annotation.JsonView;
import com.wavemaker.commons.json.views.JsonViews.BlobAsUrlView;
import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.dbofflinestorage.offlineclassicdb.Customers;
import com.dbofflinestorage.offlineclassicdb.Employees;
import com.dbofflinestorage.offlineclassicdb.OrderDetails;
import com.dbofflinestorage.offlineclassicdb.service.OfflineClassicDBQueryExecutorService;
import com.dbofflinestorage.offlineclassicdb.models.query.*;

@RestController(value = "OfflineClassicDB.QueryExecutionController")
@RequestMapping("/OfflineClassicDB/queryExecutor")
@Api(value = "QueryExecutionController", description = "controller class for query execution")
public class QueryExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(QueryExecutionController.class);

    @Autowired
    private OfflineClassicDBQueryExecutorService queryService;

    @Autowired
	private ExportedFileManager exportedFileManager;

    @RequestMapping(value = "/queries/SV_OROperator", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "SV_OROperator")
    public Page<SvOroperatorResponse> executeSV_OROperator(@RequestParam(value = "officeCode1") Integer officeCode1, @RequestParam(value = "officeCode2") Integer officeCode2, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_OROperator");
        Page<SvOroperatorResponse> _result = queryService.executeSV_OROperator(officeCode1, officeCode2, pageable);
        LOGGER.debug("got the result for named query: SV_OROperator, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SV_OROperator")
    @RequestMapping(value = "/queries/SV_OROperator/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSV_OROperator(@RequestParam(value = "officeCode1") Integer officeCode1, @RequestParam(value = "officeCode2") Integer officeCode2, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SV_OROperator");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SV_OROperator";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSV_OROperator(officeCode1, officeCode2,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/SV_ANDOperator", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "SV_AND")
    public Page<SvAndoperatorResponse> executeSV_ANDOperator(@RequestParam(value = "status") String status, @RequestParam(value = "custNumber") Integer custNumber, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_ANDOperator");
        Page<SvAndoperatorResponse> _result = queryService.executeSV_ANDOperator(status, custNumber, pageable);
        LOGGER.debug("got the result for named query: SV_ANDOperator, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SV_ANDOperator")
    @RequestMapping(value = "/queries/SV_ANDOperator/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSV_ANDOperator(@RequestParam(value = "status") String status, @RequestParam(value = "custNumber") Integer custNumber, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SV_ANDOperator");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SV_ANDOperator";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSV_ANDOperator(status, custNumber,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/HQL_FromCustomer", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "HQL_FromCustomer")
    public Page<Customers> executeHQL_FromCustomer(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: HQL_FromCustomer");
        Page<Customers> _result = queryService.executeHQL_FromCustomer(pageable);
        LOGGER.debug("got the result for named query: HQL_FromCustomer, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query HQL_FromCustomer")
    @RequestMapping(value = "/queries/HQL_FromCustomer/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportHQL_FromCustomer(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: HQL_FromCustomer");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "HQL_FromCustomer";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportHQL_FromCustomer( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/SV_LessThan", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "SV_LessThan")
    public Page<SvLessThanResponse> executeSV_LessThan(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_LessThan");
        Page<SvLessThanResponse> _result = queryService.executeSV_LessThan(pageable);
        LOGGER.debug("got the result for named query: SV_LessThan, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SV_LessThan")
    @RequestMapping(value = "/queries/SV_LessThan/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSV_LessThan(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SV_LessThan");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SV_LessThan";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSV_LessThan( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/SV_DISTINCT", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "SV_DISTINCT")
    public Page<SvDistinctResponse> executeSV_DISTINCT(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_DISTINCT");
        Page<SvDistinctResponse> _result = queryService.executeSV_DISTINCT(pageable);
        LOGGER.debug("got the result for named query: SV_DISTINCT, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SV_DISTINCT")
    @RequestMapping(value = "/queries/SV_DISTINCT/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSV_DISTINCT(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SV_DISTINCT");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SV_DISTINCT";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSV_DISTINCT( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/SV_WhereClause", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "SV_WhereClause")
    public Page<SvWhereClauseResponse> executeSV_WhereClause(@RequestParam(value = "city") String city, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_WhereClause");
        Page<SvWhereClauseResponse> _result = queryService.executeSV_WhereClause(city, pageable);
        LOGGER.debug("got the result for named query: SV_WhereClause, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SV_WhereClause")
    @RequestMapping(value = "/queries/SV_WhereClause/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSV_WhereClause(@RequestParam(value = "city") String city, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SV_WhereClause");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SV_WhereClause";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSV_WhereClause(city,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/HQL_CustomQueryWithAlias", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "HQL_CustomQueryWithAlias")
    public Page<HqlCustomQueryWithAliasResponse> executeHQL_CustomQueryWithAlias(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: HQL_CustomQueryWithAlias");
        Page<HqlCustomQueryWithAliasResponse> _result = queryService.executeHQL_CustomQueryWithAlias(pageable);
        LOGGER.debug("got the result for named query: HQL_CustomQueryWithAlias, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query HQL_CustomQueryWithAlias")
    @RequestMapping(value = "/queries/HQL_CustomQueryWithAlias/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportHQL_CustomQueryWithAlias(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: HQL_CustomQueryWithAlias");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "HQL_CustomQueryWithAlias";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportHQL_CustomQueryWithAlias( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/HQL_GreaterThanOrderBy", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "HQL_GreaterThanOrderBy")
    public Page<Employees> executeHQL_GreaterThanOrderBy(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: HQL_GreaterThanOrderBy");
        Page<Employees> _result = queryService.executeHQL_GreaterThanOrderBy(pageable);
        LOGGER.debug("got the result for named query: HQL_GreaterThanOrderBy, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query HQL_GreaterThanOrderBy")
    @RequestMapping(value = "/queries/HQL_GreaterThanOrderBy/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportHQL_GreaterThanOrderBy(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: HQL_GreaterThanOrderBy");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "HQL_GreaterThanOrderBy";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportHQL_GreaterThanOrderBy( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/HQL_FromEntityWhereClause", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "HQL_FromEntityWhereClause")
    public Page<Employees> executeHQL_FromEntityWhereClause(@RequestParam(value = "empNumber") Integer empNumber, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: HQL_FromEntityWhereClause");
        Page<Employees> _result = queryService.executeHQL_FromEntityWhereClause(empNumber, pageable);
        LOGGER.debug("got the result for named query: HQL_FromEntityWhereClause, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query HQL_FromEntityWhereClause")
    @RequestMapping(value = "/queries/HQL_FromEntityWhereClause/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportHQL_FromEntityWhereClause(@RequestParam(value = "empNumber") Integer empNumber, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: HQL_FromEntityWhereClause");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "HQL_FromEntityWhereClause";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportHQL_FromEntityWhereClause(empNumber,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @JsonView(BlobAsUrlView.class)
    @RequestMapping(value = "/queries/SV_BetweenOperator", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "SV_BetweenOperator")
    public Page<SvBetweenOperatorResponse> executeSV_BetweenOperator(@RequestParam(value = "bytevalue1") Byte bytevalue1, @RequestParam(value = "bytevalue2") Byte bytevalue2, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_BetweenOperator");
        Page<SvBetweenOperatorResponse> _result = queryService.executeSV_BetweenOperator(bytevalue1, bytevalue2, pageable);
        LOGGER.debug("got the result for named query: SV_BetweenOperator, result:{}", _result);
        UriComponentsBuilder _uriBuilder = ServletUriComponentsBuilder.fromRequest(_request);
        _uriBuilder.path("/{pkId}/content/{_fieldName_}");
        for(SvBetweenOperatorResponse _content : _result.getContent()) {
            Map<String, Object> _properties = new HashMap(2);
            _properties.put("pkId", _content.getPkId());
            _properties.put("_fieldName_", "blobCol");
            if(_content.getBlobCol() != null) {
                _content.setBlobCol(_uriBuilder.buildAndExpand(_properties).toUriString().getBytes());
            } else {
                _content.setBlobCol(null);
            }
        }
        return _result;
    }

    @ApiOperation(value = "Retrives the BLOB content for property blobCol in query SV_BetweenOperator")
    @RequestMapping(value = "/queries/SV_BetweenOperator/{pkId}/content/blobCol", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable getBlobColContentForSV_BetweenOperator(@PathVariable("pkId") Integer pkId, @RequestParam(value = "bytevalue1") Byte bytevalue1, @RequestParam(value = "bytevalue2") Byte bytevalue2, @RequestParam(value="downloadAsAttachment", defaultValue = "false") boolean downloadAsAttachment, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_BetweenOperator");

        InputStream _result = queryService.getBlobColContentForSV_BetweenOperator(pkId, bytevalue1, bytevalue2);
        return WMMultipartUtils.buildDownloadResponse(_request, _result, downloadAsAttachment);
    }

    @ApiOperation(value = "Returns downloadable file url for query SV_BetweenOperator")
    @RequestMapping(value = "/queries/SV_BetweenOperator/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSV_BetweenOperator(@RequestParam(value = "bytevalue1") Byte bytevalue1, @RequestParam(value = "bytevalue2") Byte bytevalue2, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SV_BetweenOperator");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SV_BetweenOperator";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSV_BetweenOperator(bytevalue1, bytevalue2,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @JsonView(BlobAsUrlView.class)
    @RequestMapping(value = "/queries/SV_CombinedOrderBy", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "SV_CombinedOrderBy")
    public Page<SvCombinedOrderByResponse> executeSV_CombinedOrderBy(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_CombinedOrderBy");
        Page<SvCombinedOrderByResponse> _result = queryService.executeSV_CombinedOrderBy(pageable);
        LOGGER.debug("got the result for named query: SV_CombinedOrderBy, result:{}", _result);
        UriComponentsBuilder _uriBuilder = ServletUriComponentsBuilder.fromRequest(_request);
        _uriBuilder.path("/{pkId}/content/{_fieldName_}");
        for(SvCombinedOrderByResponse _content : _result.getContent()) {
            Map<String, Object> _properties = new HashMap(2);
            _properties.put("pkId", _content.getPkId());
            _properties.put("_fieldName_", "blobCol");
            if(_content.getBlobCol() != null) {
                _content.setBlobCol(_uriBuilder.buildAndExpand(_properties).toUriString().getBytes());
            } else {
                _content.setBlobCol(null);
            }
        }
        return _result;
    }

    @ApiOperation(value = "Retrives the BLOB content for property blobCol in query SV_CombinedOrderBy")
    @RequestMapping(value = "/queries/SV_CombinedOrderBy/{pkId}/content/blobCol", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable getBlobColContentForSV_CombinedOrderBy(@PathVariable("pkId") Integer pkId, @RequestParam(value="downloadAsAttachment", defaultValue = "false") boolean downloadAsAttachment, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_CombinedOrderBy");

        InputStream _result = queryService.getBlobColContentForSV_CombinedOrderBy(pkId);
        return WMMultipartUtils.buildDownloadResponse(_request, _result, downloadAsAttachment);
    }

    @ApiOperation(value = "Returns downloadable file url for query SV_CombinedOrderBy")
    @RequestMapping(value = "/queries/SV_CombinedOrderBy/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSV_CombinedOrderBy(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SV_CombinedOrderBy");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SV_CombinedOrderBy";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSV_CombinedOrderBy( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/SV_INOperator", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "SV_INOperator")
    public Page<SvInoperatorResponse> executeSV_INOperator(@RequestParam(value = "PCODE") List<String> pcode, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_INOperator");
        Page<SvInoperatorResponse> _result = queryService.executeSV_INOperator(pcode, pageable);
        LOGGER.debug("got the result for named query: SV_INOperator, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SV_INOperator")
    @RequestMapping(value = "/queries/SV_INOperator/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSV_INOperator(@RequestParam(value = "PCODE") List<String> pcode, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SV_INOperator");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SV_INOperator";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSV_INOperator(pcode,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/SV_LIKE", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "SV_LIKE")
    public Page<SvLikeResponse> executeSV_LIKE(@RequestParam(value = "jobtitle") String jobtitle, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_LIKE");
        Page<SvLikeResponse> _result = queryService.executeSV_LIKE(jobtitle, pageable);
        LOGGER.debug("got the result for named query: SV_LIKE, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SV_LIKE")
    @RequestMapping(value = "/queries/SV_LIKE/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSV_LIKE(@RequestParam(value = "jobtitle") String jobtitle, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SV_LIKE");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SV_LIKE";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSV_LIKE(jobtitle,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/SV_GreaterThan", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "SV_GreaterThan")
    public Page<SvGreaterThanResponse> executeSV_GreaterThan(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_GreaterThan");
        Page<SvGreaterThanResponse> _result = queryService.executeSV_GreaterThan(pageable);
        LOGGER.debug("got the result for named query: SV_GreaterThan, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SV_GreaterThan")
    @RequestMapping(value = "/queries/SV_GreaterThan/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSV_GreaterThan(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SV_GreaterThan");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SV_GreaterThan";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSV_GreaterThan( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/HQL_FromEntityUsingAlias", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "HQL_FromEntityUsingAlias")
    public Page<OrderDetails> executeHQL_FromEntityUsingAlias(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: HQL_FromEntityUsingAlias");
        Page<OrderDetails> _result = queryService.executeHQL_FromEntityUsingAlias(pageable);
        LOGGER.debug("got the result for named query: HQL_FromEntityUsingAlias, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query HQL_FromEntityUsingAlias")
    @RequestMapping(value = "/queries/HQL_FromEntityUsingAlias/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportHQL_FromEntityUsingAlias(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: HQL_FromEntityUsingAlias");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "HQL_FromEntityUsingAlias";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportHQL_FromEntityUsingAlias( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/HQL_CustomQueryWithoutAliasNames", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "HQL_CustomQueryWithoutAliasNames")
    public Page<HqlCustomQueryWithoutAliasNamesResponse> executeHQL_CustomQueryWithoutAliasNames(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: HQL_CustomQueryWithoutAliasNames");
        Page<HqlCustomQueryWithoutAliasNamesResponse> _result = queryService.executeHQL_CustomQueryWithoutAliasNames(pageable);
        LOGGER.debug("got the result for named query: HQL_CustomQueryWithoutAliasNames, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query HQL_CustomQueryWithoutAliasNames")
    @RequestMapping(value = "/queries/HQL_CustomQueryWithoutAliasNames/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportHQL_CustomQueryWithoutAliasNames(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: HQL_CustomQueryWithoutAliasNames");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "HQL_CustomQueryWithoutAliasNames";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportHQL_CustomQueryWithoutAliasNames( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/SV_AND_OR", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "SV_AND_OR")
    public Page<SvAndOrResponse> executeSV_AND_OR(@RequestParam(value = "status") String status, @RequestParam(value = "custNumber1") Integer custNumber1, @RequestParam(value = "custNumber2") Integer custNumber2, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_AND_OR");
        Page<SvAndOrResponse> _result = queryService.executeSV_AND_OR(status, custNumber1, custNumber2, pageable);
        LOGGER.debug("got the result for named query: SV_AND_OR, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SV_AND_OR")
    @RequestMapping(value = "/queries/SV_AND_OR/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSV_AND_OR(@RequestParam(value = "status") String status, @RequestParam(value = "custNumber1") Integer custNumber1, @RequestParam(value = "custNumber2") Integer custNumber2, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SV_AND_OR");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SV_AND_OR";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSV_AND_OR(status, custNumber1, custNumber2,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

}