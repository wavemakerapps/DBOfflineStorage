/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.dbofflinestorage.offlineclassicdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.dbofflinestorage.offlineclassicdb.AssignedType;
import com.dbofflinestorage.offlineclassicdb.service.AssignedTypeService;


/**
 * Controller object for domain model class AssignedType.
 * @see AssignedType
 */
@RestController("OfflineClassicDB.AssignedTypeController")
@Api(value = "AssignedTypeController", description = "Exposes APIs to work with AssignedType resource.")
@RequestMapping("/OfflineClassicDB/AssignedType")
public class AssignedTypeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AssignedTypeController.class);

    @Autowired
	@Qualifier("OfflineClassicDB.AssignedTypeService")
	private AssignedTypeService assignedTypeService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new AssignedType instance.")
    @RequestMapping(method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AssignedType createAssignedType(@RequestPart("wm_data_json") AssignedType assignedType, @RequestPart(value = "blobCol", required = false) MultipartFile _blobCol) {
		LOGGER.debug("Create AssignedType with information: {}" , assignedType);

    assignedType.setBlobCol(WMMultipartUtils.toByteArray(_blobCol));
		assignedType = assignedTypeService.create(assignedType);
		LOGGER.debug("Created AssignedType with information: {}" , assignedType);

	    return assignedType;
	}

    @ApiOperation(value = "Returns the AssignedType instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AssignedType getAssignedType(@PathVariable("id") Double id) {
        LOGGER.debug("Getting AssignedType with id: {}" , id);

        AssignedType foundAssignedType = assignedTypeService.getById(id);
        LOGGER.debug("AssignedType details with id: {}" , foundAssignedType);

        return foundAssignedType;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in AssignedType instance" )
    @RequestMapping(value = "/{id}/content/{fieldName}", method = RequestMethod.GET, produces="application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DownloadResponse getAssignedTypeBLOBContent(@PathVariable("id") Double id, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestParam(value="download", defaultValue = "false") boolean download) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in AssignedType instance" , fieldName);

        if(!WMRuntimeUtils.isLob(AssignedType.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName + " is not a valid BLOB type");
        }
        AssignedType assignedType = assignedTypeService.getById(id);

        return WMMultipartUtils.buildDownloadResponseForBlob(assignedType, fieldName, httpServletRequest, download);
    }

    @ApiOperation(value = "Updates the AssignedType instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AssignedType editAssignedType(@PathVariable("id") Double id, @RequestBody AssignedType assignedType) {
        LOGGER.debug("Editing AssignedType with id: {}" , assignedType.getDoubleId());

        assignedType.setDoubleId(id);
        assignedType = assignedTypeService.update(assignedType);
        LOGGER.debug("AssignedType details with id: {}" , assignedType);

        return assignedType;
    }

    @ApiOperation(value = "Updates the AssignedType instance associated with the given id.This API should be used when AssignedType instance fields that require multipart data.") 
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AssignedType editAssignedType(@PathVariable("id") Double id, MultipartHttpServletRequest multipartHttpServletRequest) {
        AssignedType newAssignedType = WMMultipartUtils.toObject(multipartHttpServletRequest, AssignedType.class, "OfflineClassicDB");
        newAssignedType.setDoubleId(id);

        AssignedType oldAssignedType = assignedTypeService.getById(id);
        WMMultipartUtils.updateLobsContent(oldAssignedType, newAssignedType);
        LOGGER.debug("Updating AssignedType with information: {}" , newAssignedType);

        return assignedTypeService.update(newAssignedType);
    }

    @ApiOperation(value = "Deletes the AssignedType instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteAssignedType(@PathVariable("id") Double id) {
        LOGGER.debug("Deleting AssignedType with id: {}" , id);

        AssignedType deletedAssignedType = assignedTypeService.delete(id);

        return deletedAssignedType != null;
    }

    /**
     * @deprecated Use {@link #findAssignedTypes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of AssignedType instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<AssignedType> searchAssignedTypesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering AssignedTypes list by query filter:{}", (Object) queryFilters);
        return assignedTypeService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AssignedType instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AssignedType> findAssignedTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AssignedTypes list by filter:", query);
        return assignedTypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AssignedType instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<AssignedType> filterAssignedTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AssignedTypes list by filter", query);
        return assignedTypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportAssignedTypes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return assignedTypeService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportAssignedTypesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = AssignedType.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> assignedTypeService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of AssignedType instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countAssignedTypes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting AssignedTypes");
		return assignedTypeService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getAssignedTypeAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return assignedTypeService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AssignedTypeService instance
	 */
	protected void setAssignedTypeService(AssignedTypeService service) {
		this.assignedTypeService = service;
	}

}