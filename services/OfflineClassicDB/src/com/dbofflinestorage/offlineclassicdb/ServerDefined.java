/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.dbofflinestorage.offlineclassicdb;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

import com.wavemaker.runtime.data.annotations.WMValueInject;
import com.wavemaker.runtime.data.replacers.Scope;
import com.wavemaker.runtime.data.replacers.providers.VariableType;

/**
 * ServerDefined generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`Server Defined`")
public class ServerDefined implements Serializable {

    private Integer id;
    @WMValueInject( type = VariableType.SERVER, name = "USER_ID", scopes = { Scope.UPDATE, Scope.INSERT })
    private Integer userIdInteger;
    @WMValueInject( type = VariableType.SERVER, name = "USER_ID", scopes = { Scope.INSERT })
    private String userIdString;
    @WMValueInject( type = VariableType.SERVER, name = "USER_NAME", scopes = { Scope.UPDATE, Scope.INSERT })
    private String username;
    @WMValueInject( type = VariableType.SERVER, name = "DATE", scopes = { Scope.UPDATE, Scope.INSERT })
    private Date currentDate;
    @WMValueInject( type = VariableType.SERVER, name = "TIME", scopes = { Scope.UPDATE, Scope.INSERT })
    private Time currentTime;
    @WMValueInject( type = VariableType.SERVER, name = "DATE_TIME", scopes = { Scope.UPDATE, Scope.INSERT })
    private LocalDateTime currentDatetime;
    private String stringCol;
    @WMValueInject( type = VariableType.SERVER, name = "DATE", scopes = { Scope.UPDATE })
    private Date currentDateUpdatable;
    @WMValueInject( type = VariableType.SERVER, name = "TIME", scopes = { Scope.INSERT })
    private Time currentTimeUpdatable;
    @WMValueInject( type = VariableType.SERVER, name = "DATE_TIME", scopes = { Scope.INSERT })
    private LocalDateTime currentDatetimeInsertable;
    private LocalDateTime deltaDatetimeCol;
    private Timestamp deltaTimestampCol;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`ID`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`UserId Integer`", nullable = true, scale = 0, precision = 10)
    public Integer getUserIdInteger() {
        return this.userIdInteger;
    }

    public void setUserIdInteger(Integer userIdInteger) {
        this.userIdInteger = userIdInteger;
    }

    @Column(name = "`UserId String`", nullable = true, updatable = false, length = 255)
    public String getUserIdString() {
        return this.userIdString;
    }

    public void setUserIdString(String userIdString) {
        this.userIdString = userIdString;
    }

    @Column(name = "`Username`", nullable = true, length = 255)
    public String getUsername() {
        return this.username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    @Column(name = "`Current Date`", nullable = true)
    public Date getCurrentDate() {
        return this.currentDate;
    }

    public void setCurrentDate(Date currentDate) {
        this.currentDate = currentDate;
    }

    @Column(name = "`Current Time`", nullable = true)
    public Time getCurrentTime() {
        return this.currentTime;
    }

    public void setCurrentTime(Time currentTime) {
        this.currentTime = currentTime;
    }

    @Column(name = "`Current Datetime`", nullable = true)
    public LocalDateTime getCurrentDatetime() {
        return this.currentDatetime;
    }

    public void setCurrentDatetime(LocalDateTime currentDatetime) {
        this.currentDatetime = currentDatetime;
    }

    @Column(name = "`String Col`", nullable = true, length = 255)
    public String getStringCol() {
        return this.stringCol;
    }

    public void setStringCol(String stringCol) {
        this.stringCol = stringCol;
    }

    @Column(name = "`Current Date Updatable`", nullable = true, insertable = false)
    public Date getCurrentDateUpdatable() {
        return this.currentDateUpdatable;
    }

    public void setCurrentDateUpdatable(Date currentDateUpdatable) {
        this.currentDateUpdatable = currentDateUpdatable;
    }

    @Column(name = "`Current Time Updatable`", nullable = true, updatable = false)
    public Time getCurrentTimeUpdatable() {
        return this.currentTimeUpdatable;
    }

    public void setCurrentTimeUpdatable(Time currentTimeUpdatable) {
        this.currentTimeUpdatable = currentTimeUpdatable;
    }

    @Column(name = "`Current Datetime Insertable`", nullable = true, updatable = false)
    public LocalDateTime getCurrentDatetimeInsertable() {
        return this.currentDatetimeInsertable;
    }

    public void setCurrentDatetimeInsertable(LocalDateTime currentDatetimeInsertable) {
        this.currentDatetimeInsertable = currentDatetimeInsertable;
    }

    @Column(name = "`DeltaDatetimeCol`", nullable = true)
    public LocalDateTime getDeltaDatetimeCol() {
        return this.deltaDatetimeCol;
    }

    public void setDeltaDatetimeCol(LocalDateTime deltaDatetimeCol) {
        this.deltaDatetimeCol = deltaDatetimeCol;
    }

    @Column(name = "`DeltaTimestampCol`", nullable = true)
    public Timestamp getDeltaTimestampCol() {
        return this.deltaTimestampCol;
    }

    public void setDeltaTimestampCol(Timestamp deltaTimestampCol) {
        this.deltaTimestampCol = deltaTimestampCol;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ServerDefined)) return false;
        final ServerDefined serverDefined = (ServerDefined) o;
        return Objects.equals(getId(), serverDefined.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}