/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.dbofflinestorage.offlineclassicdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dbofflinestorage.offlineclassicdb.AppEnvTable;


/**
 * ServiceImpl object for domain model class AppEnvTable.
 *
 * @see AppEnvTable
 */
@Service("OfflineClassicDB.AppEnvTableService")
@Validated
public class AppEnvTableServiceImpl implements AppEnvTableService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AppEnvTableServiceImpl.class);


    @Autowired
    @Qualifier("OfflineClassicDB.AppEnvTableDao")
    private WMGenericDao<AppEnvTable, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AppEnvTable, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "OfflineClassicDBTransactionManager")
    @Override
    public AppEnvTable create(AppEnvTable appEnvTable) {
        LOGGER.debug("Creating a new AppEnvTable with information: {}", appEnvTable);

        AppEnvTable appEnvTableCreated = this.wmGenericDao.create(appEnvTable);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(appEnvTableCreated);
    }

    @Transactional(readOnly = true, value = "OfflineClassicDBTransactionManager")
    @Override
    public AppEnvTable getById(Integer appenvtableId) {
        LOGGER.debug("Finding AppEnvTable by id: {}", appenvtableId);
        return this.wmGenericDao.findById(appenvtableId);
    }

    @Transactional(readOnly = true, value = "OfflineClassicDBTransactionManager")
    @Override
    public AppEnvTable findById(Integer appenvtableId) {
        LOGGER.debug("Finding AppEnvTable by id: {}", appenvtableId);
        try {
            return this.wmGenericDao.findById(appenvtableId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No AppEnvTable found with id: {}", appenvtableId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "OfflineClassicDBTransactionManager")
    @Override
    public List<AppEnvTable> findByMultipleIds(List<Integer> appenvtableIds, boolean orderedReturn) {
        LOGGER.debug("Finding AppEnvTables by ids: {}", appenvtableIds);

        return this.wmGenericDao.findByMultipleIds(appenvtableIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "OfflineClassicDBTransactionManager")
    @Override
    public AppEnvTable update(AppEnvTable appEnvTable) {
        LOGGER.debug("Updating AppEnvTable with information: {}", appEnvTable);

        this.wmGenericDao.update(appEnvTable);
        this.wmGenericDao.refresh(appEnvTable);

        return appEnvTable;
    }

    @Transactional(value = "OfflineClassicDBTransactionManager")
    @Override
    public AppEnvTable delete(Integer appenvtableId) {
        LOGGER.debug("Deleting AppEnvTable with id: {}", appenvtableId);
        AppEnvTable deleted = this.wmGenericDao.findById(appenvtableId);
        if (deleted == null) {
            LOGGER.debug("No AppEnvTable found with id: {}", appenvtableId);
            throw new EntityNotFoundException(String.valueOf(appenvtableId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "OfflineClassicDBTransactionManager")
    @Override
    public void delete(AppEnvTable appEnvTable) {
        LOGGER.debug("Deleting AppEnvTable with {}", appEnvTable);
        this.wmGenericDao.delete(appEnvTable);
    }

    @Transactional(readOnly = true, value = "OfflineClassicDBTransactionManager")
    @Override
    public Page<AppEnvTable> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all AppEnvTables");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "OfflineClassicDBTransactionManager")
    @Override
    public Page<AppEnvTable> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all AppEnvTables");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "OfflineClassicDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service OfflineClassicDB for table AppEnvTable to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "OfflineClassicDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service OfflineClassicDB for table AppEnvTable to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "OfflineClassicDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "OfflineClassicDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}