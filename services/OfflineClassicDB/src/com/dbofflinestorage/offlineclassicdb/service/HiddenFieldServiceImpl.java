/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.dbofflinestorage.offlineclassicdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dbofflinestorage.offlineclassicdb.HiddenField;


/**
 * ServiceImpl object for domain model class HiddenField.
 *
 * @see HiddenField
 */
@Service("OfflineClassicDB.HiddenFieldService")
@Validated
public class HiddenFieldServiceImpl implements HiddenFieldService {

    private static final Logger LOGGER = LoggerFactory.getLogger(HiddenFieldServiceImpl.class);


    @Autowired
    @Qualifier("OfflineClassicDB.HiddenFieldDao")
    private WMGenericDao<HiddenField, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<HiddenField, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "OfflineClassicDBTransactionManager")
    @Override
    public HiddenField create(HiddenField hiddenField) {
        LOGGER.debug("Creating a new HiddenField with information: {}", hiddenField);

        HiddenField hiddenFieldCreated = this.wmGenericDao.create(hiddenField);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(hiddenFieldCreated);
    }

    @Transactional(readOnly = true, value = "OfflineClassicDBTransactionManager")
    @Override
    public HiddenField getById(Integer hiddenfieldId) {
        LOGGER.debug("Finding HiddenField by id: {}", hiddenfieldId);
        return this.wmGenericDao.findById(hiddenfieldId);
    }

    @Transactional(readOnly = true, value = "OfflineClassicDBTransactionManager")
    @Override
    public HiddenField findById(Integer hiddenfieldId) {
        LOGGER.debug("Finding HiddenField by id: {}", hiddenfieldId);
        try {
            return this.wmGenericDao.findById(hiddenfieldId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No HiddenField found with id: {}", hiddenfieldId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "OfflineClassicDBTransactionManager")
    @Override
    public List<HiddenField> findByMultipleIds(List<Integer> hiddenfieldIds, boolean orderedReturn) {
        LOGGER.debug("Finding HiddenFields by ids: {}", hiddenfieldIds);

        return this.wmGenericDao.findByMultipleIds(hiddenfieldIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "OfflineClassicDBTransactionManager")
    @Override
    public HiddenField update(HiddenField hiddenField) {
        LOGGER.debug("Updating HiddenField with information: {}", hiddenField);

        this.wmGenericDao.update(hiddenField);
        this.wmGenericDao.refresh(hiddenField);

        return hiddenField;
    }

    @Transactional(value = "OfflineClassicDBTransactionManager")
    @Override
    public HiddenField delete(Integer hiddenfieldId) {
        LOGGER.debug("Deleting HiddenField with id: {}", hiddenfieldId);
        HiddenField deleted = this.wmGenericDao.findById(hiddenfieldId);
        if (deleted == null) {
            LOGGER.debug("No HiddenField found with id: {}", hiddenfieldId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), HiddenField.class.getSimpleName(), hiddenfieldId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "OfflineClassicDBTransactionManager")
    @Override
    public void delete(HiddenField hiddenField) {
        LOGGER.debug("Deleting HiddenField with {}", hiddenField);
        this.wmGenericDao.delete(hiddenField);
    }

    @Transactional(readOnly = true, value = "OfflineClassicDBTransactionManager")
    @Override
    public Page<HiddenField> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all HiddenFields");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "OfflineClassicDBTransactionManager")
    @Override
    public Page<HiddenField> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all HiddenFields");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "OfflineClassicDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service OfflineClassicDB for table HiddenField to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "OfflineClassicDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service OfflineClassicDB for table HiddenField to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "OfflineClassicDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "OfflineClassicDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}