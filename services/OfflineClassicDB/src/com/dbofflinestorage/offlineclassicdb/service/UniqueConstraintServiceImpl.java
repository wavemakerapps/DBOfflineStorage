/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.dbofflinestorage.offlineclassicdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.sql.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dbofflinestorage.offlineclassicdb.UniqueConstraint;


/**
 * ServiceImpl object for domain model class UniqueConstraint.
 *
 * @see UniqueConstraint
 */
@Service("OfflineClassicDB.UniqueConstraintService")
@Validated
public class UniqueConstraintServiceImpl implements UniqueConstraintService {

    private static final Logger LOGGER = LoggerFactory.getLogger(UniqueConstraintServiceImpl.class);


    @Autowired
    @Qualifier("OfflineClassicDB.UniqueConstraintDao")
    private WMGenericDao<UniqueConstraint, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<UniqueConstraint, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "OfflineClassicDBTransactionManager")
    @Override
    public UniqueConstraint create(UniqueConstraint uniqueConstraint) {
        LOGGER.debug("Creating a new UniqueConstraint with information: {}", uniqueConstraint);

        UniqueConstraint uniqueConstraintCreated = this.wmGenericDao.create(uniqueConstraint);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(uniqueConstraintCreated);
    }

    @Transactional(readOnly = true, value = "OfflineClassicDBTransactionManager")
    @Override
    public UniqueConstraint getById(Integer uniqueconstraintId) {
        LOGGER.debug("Finding UniqueConstraint by id: {}", uniqueconstraintId);
        return this.wmGenericDao.findById(uniqueconstraintId);
    }

    @Transactional(readOnly = true, value = "OfflineClassicDBTransactionManager")
    @Override
    public UniqueConstraint findById(Integer uniqueconstraintId) {
        LOGGER.debug("Finding UniqueConstraint by id: {}", uniqueconstraintId);
        try {
            return this.wmGenericDao.findById(uniqueconstraintId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No UniqueConstraint found with id: {}", uniqueconstraintId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "OfflineClassicDBTransactionManager")
    @Override
    public List<UniqueConstraint> findByMultipleIds(List<Integer> uniqueconstraintIds, boolean orderedReturn) {
        LOGGER.debug("Finding UniqueConstraints by ids: {}", uniqueconstraintIds);

        return this.wmGenericDao.findByMultipleIds(uniqueconstraintIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "OfflineClassicDBTransactionManager")
    @Override
    public UniqueConstraint getByDateColAndCharCol(Date dateCol, String charCol) {
        Map<String, Object> dateColAndCharColMap = new HashMap<>();
        dateColAndCharColMap.put("dateCol", dateCol);
        dateColAndCharColMap.put("charCol", charCol);

        LOGGER.debug("Finding UniqueConstraint by unique keys: {}", dateColAndCharColMap);
        return this.wmGenericDao.findByUniqueKey(dateColAndCharColMap);
    }

    @Transactional(readOnly = true, value = "OfflineClassicDBTransactionManager")
    @Override
    public UniqueConstraint getByStringCol(String stringCol) {
        Map<String, Object> stringColMap = new HashMap<>();
        stringColMap.put("stringCol", stringCol);

        LOGGER.debug("Finding UniqueConstraint by unique keys: {}", stringColMap);
        return this.wmGenericDao.findByUniqueKey(stringColMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "OfflineClassicDBTransactionManager")
    @Override
    public UniqueConstraint update(UniqueConstraint uniqueConstraint) {
        LOGGER.debug("Updating UniqueConstraint with information: {}", uniqueConstraint);

        this.wmGenericDao.update(uniqueConstraint);
        this.wmGenericDao.refresh(uniqueConstraint);

        return uniqueConstraint;
    }

    @Transactional(value = "OfflineClassicDBTransactionManager")
    @Override
    public UniqueConstraint delete(Integer uniqueconstraintId) {
        LOGGER.debug("Deleting UniqueConstraint with id: {}", uniqueconstraintId);
        UniqueConstraint deleted = this.wmGenericDao.findById(uniqueconstraintId);
        if (deleted == null) {
            LOGGER.debug("No UniqueConstraint found with id: {}", uniqueconstraintId);
            throw new EntityNotFoundException(String.valueOf(uniqueconstraintId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "OfflineClassicDBTransactionManager")
    @Override
    public void delete(UniqueConstraint uniqueConstraint) {
        LOGGER.debug("Deleting UniqueConstraint with {}", uniqueConstraint);
        this.wmGenericDao.delete(uniqueConstraint);
    }

    @Transactional(readOnly = true, value = "OfflineClassicDBTransactionManager")
    @Override
    public Page<UniqueConstraint> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all UniqueConstraints");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "OfflineClassicDBTransactionManager")
    @Override
    public Page<UniqueConstraint> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all UniqueConstraints");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "OfflineClassicDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service OfflineClassicDB for table UniqueConstraint to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "OfflineClassicDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service OfflineClassicDB for table UniqueConstraint to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "OfflineClassicDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "OfflineClassicDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}