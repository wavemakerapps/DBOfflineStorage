/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.dbofflinestorage.offlineclassicdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dbofflinestorage.offlineclassicdb.Employees;
import com.dbofflinestorage.offlineclassicdb.Offices;


/**
 * ServiceImpl object for domain model class Offices.
 *
 * @see Offices
 */
@Service("OfflineClassicDB.OfficesService")
@Validated
public class OfficesServiceImpl implements OfficesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(OfficesServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("OfflineClassicDB.EmployeesService")
    private EmployeesService employeesService;

    @Autowired
    @Qualifier("OfflineClassicDB.OfficesDao")
    private WMGenericDao<Offices, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Offices, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "OfflineClassicDBTransactionManager")
    @Override
    public Offices create(Offices offices) {
        LOGGER.debug("Creating a new Offices with information: {}", offices);

        Offices officesCreated = this.wmGenericDao.create(offices);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(officesCreated);
    }

    @Transactional(readOnly = true, value = "OfflineClassicDBTransactionManager")
    @Override
    public Offices getById(String officesId) {
        LOGGER.debug("Finding Offices by id: {}", officesId);
        return this.wmGenericDao.findById(officesId);
    }

    @Transactional(readOnly = true, value = "OfflineClassicDBTransactionManager")
    @Override
    public Offices findById(String officesId) {
        LOGGER.debug("Finding Offices by id: {}", officesId);
        try {
            return this.wmGenericDao.findById(officesId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Offices found with id: {}", officesId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "OfflineClassicDBTransactionManager")
    @Override
    public List<Offices> findByMultipleIds(List<String> officesIds, boolean orderedReturn) {
        LOGGER.debug("Finding Offices by ids: {}", officesIds);

        return this.wmGenericDao.findByMultipleIds(officesIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "OfflineClassicDBTransactionManager")
    @Override
    public Offices update(Offices offices) {
        LOGGER.debug("Updating Offices with information: {}", offices);

        this.wmGenericDao.update(offices);
        this.wmGenericDao.refresh(offices);

        return offices;
    }

    @Transactional(value = "OfflineClassicDBTransactionManager")
    @Override
    public Offices delete(String officesId) {
        LOGGER.debug("Deleting Offices with id: {}", officesId);
        Offices deleted = this.wmGenericDao.findById(officesId);
        if (deleted == null) {
            LOGGER.debug("No Offices found with id: {}", officesId);
            throw new EntityNotFoundException(String.valueOf(officesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "OfflineClassicDBTransactionManager")
    @Override
    public void delete(Offices offices) {
        LOGGER.debug("Deleting Offices with {}", offices);
        this.wmGenericDao.delete(offices);
    }

    @Transactional(readOnly = true, value = "OfflineClassicDBTransactionManager")
    @Override
    public Page<Offices> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Offices");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "OfflineClassicDBTransactionManager")
    @Override
    public Page<Offices> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Offices");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "OfflineClassicDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service OfflineClassicDB for table Offices to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "OfflineClassicDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service OfflineClassicDB for table Offices to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "OfflineClassicDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "OfflineClassicDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "OfflineClassicDBTransactionManager")
    @Override
    public Page<Employees> findAssociatedEmployeeses(String officeCode, Pageable pageable) {
        LOGGER.debug("Fetching all associated employeeses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("offices.officeCode = '" + officeCode + "'");

        return employeesService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service EmployeesService instance
     */
    protected void setEmployeesService(EmployeesService service) {
        this.employeesService = service;
    }

}