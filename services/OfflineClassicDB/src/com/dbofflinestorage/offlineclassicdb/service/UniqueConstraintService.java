/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.dbofflinestorage.offlineclassicdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.sql.Date;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dbofflinestorage.offlineclassicdb.UniqueConstraint;

/**
 * Service object for domain model class {@link UniqueConstraint}.
 */
public interface UniqueConstraintService {

    /**
     * Creates a new UniqueConstraint. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on UniqueConstraint if any.
     *
     * @param uniqueConstraint Details of the UniqueConstraint to be created; value cannot be null.
     * @return The newly created UniqueConstraint.
     */
    UniqueConstraint create(@Valid UniqueConstraint uniqueConstraint);


	/**
     * Returns UniqueConstraint by given id if exists.
     *
     * @param uniqueconstraintId The id of the UniqueConstraint to get; value cannot be null.
     * @return UniqueConstraint associated with the given uniqueconstraintId.
	 * @throws EntityNotFoundException If no UniqueConstraint is found.
     */
    UniqueConstraint getById(Integer uniqueconstraintId);

    /**
     * Find and return the UniqueConstraint by given id if exists, returns null otherwise.
     *
     * @param uniqueconstraintId The id of the UniqueConstraint to get; value cannot be null.
     * @return UniqueConstraint associated with the given uniqueconstraintId.
     */
    UniqueConstraint findById(Integer uniqueconstraintId);

	/**
     * Find and return the list of UniqueConstraints by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param uniqueconstraintIds The id's of the UniqueConstraint to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return UniqueConstraints associated with the given uniqueconstraintIds.
     */
    List<UniqueConstraint> findByMultipleIds(List<Integer> uniqueconstraintIds, boolean orderedReturn);

    /**
     * Find and return the UniqueConstraint for given dateCol  andcharCol  if exists.
     *
     * @param dateCol value of dateCol; value cannot be null.
     * @param charCol value of charCol; value cannot be null.
     * @return UniqueConstraint associated with the given inputs.
     * @throws EntityNotFoundException if no matching UniqueConstraint found.
     */
    UniqueConstraint getByDateColAndCharCol(Date dateCol, String charCol);

    /**
     * Find and return the UniqueConstraint for given stringCol  if exists.
     *
     * @param stringCol value of stringCol; value cannot be null.
     * @return UniqueConstraint associated with the given inputs.
     * @throws EntityNotFoundException if no matching UniqueConstraint found.
     */
    UniqueConstraint getByStringCol(String stringCol);

    /**
     * Updates the details of an existing UniqueConstraint. It replaces all fields of the existing UniqueConstraint with the given uniqueConstraint.
     *
     * This method overrides the input field values using Server side or database managed properties defined on UniqueConstraint if any.
     *
     * @param uniqueConstraint The details of the UniqueConstraint to be updated; value cannot be null.
     * @return The updated UniqueConstraint.
     * @throws EntityNotFoundException if no UniqueConstraint is found with given input.
     */
    UniqueConstraint update(@Valid UniqueConstraint uniqueConstraint);

    /**
     * Deletes an existing UniqueConstraint with the given id.
     *
     * @param uniqueconstraintId The id of the UniqueConstraint to be deleted; value cannot be null.
     * @return The deleted UniqueConstraint.
     * @throws EntityNotFoundException if no UniqueConstraint found with the given id.
     */
    UniqueConstraint delete(Integer uniqueconstraintId);

    /**
     * Deletes an existing UniqueConstraint with the given object.
     *
     * @param uniqueConstraint The instance of the UniqueConstraint to be deleted; value cannot be null.
     */
    void delete(UniqueConstraint uniqueConstraint);

    /**
     * Find all UniqueConstraints matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching UniqueConstraints.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<UniqueConstraint> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all UniqueConstraints matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching UniqueConstraints.
     *
     * @see Pageable
     * @see Page
     */
    Page<UniqueConstraint> findAll(String query, Pageable pageable);

    /**
     * Exports all UniqueConstraints matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all UniqueConstraints matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the UniqueConstraints in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the UniqueConstraint.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}