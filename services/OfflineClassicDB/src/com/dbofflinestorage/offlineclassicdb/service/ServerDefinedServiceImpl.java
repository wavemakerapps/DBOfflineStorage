/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.dbofflinestorage.offlineclassicdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dbofflinestorage.offlineclassicdb.ServerDefined;


/**
 * ServiceImpl object for domain model class ServerDefined.
 *
 * @see ServerDefined
 */
@Service("OfflineClassicDB.ServerDefinedService")
@Validated
public class ServerDefinedServiceImpl implements ServerDefinedService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ServerDefinedServiceImpl.class);


    @Autowired
    @Qualifier("OfflineClassicDB.ServerDefinedDao")
    private WMGenericDao<ServerDefined, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ServerDefined, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "OfflineClassicDBTransactionManager")
    @Override
    public ServerDefined create(ServerDefined serverDefined) {
        LOGGER.debug("Creating a new ServerDefined with information: {}", serverDefined);

        ServerDefined serverDefinedCreated = this.wmGenericDao.create(serverDefined);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(serverDefinedCreated);
    }

    @Transactional(readOnly = true, value = "OfflineClassicDBTransactionManager")
    @Override
    public ServerDefined getById(Integer serverdefinedId) {
        LOGGER.debug("Finding ServerDefined by id: {}", serverdefinedId);
        return this.wmGenericDao.findById(serverdefinedId);
    }

    @Transactional(readOnly = true, value = "OfflineClassicDBTransactionManager")
    @Override
    public ServerDefined findById(Integer serverdefinedId) {
        LOGGER.debug("Finding ServerDefined by id: {}", serverdefinedId);
        try {
            return this.wmGenericDao.findById(serverdefinedId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No ServerDefined found with id: {}", serverdefinedId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "OfflineClassicDBTransactionManager")
    @Override
    public List<ServerDefined> findByMultipleIds(List<Integer> serverdefinedIds, boolean orderedReturn) {
        LOGGER.debug("Finding ServerDefineds by ids: {}", serverdefinedIds);

        return this.wmGenericDao.findByMultipleIds(serverdefinedIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "OfflineClassicDBTransactionManager")
    @Override
    public ServerDefined update(ServerDefined serverDefined) {
        LOGGER.debug("Updating ServerDefined with information: {}", serverDefined);

        this.wmGenericDao.update(serverDefined);
        this.wmGenericDao.refresh(serverDefined);

        return serverDefined;
    }

    @Transactional(value = "OfflineClassicDBTransactionManager")
    @Override
    public ServerDefined delete(Integer serverdefinedId) {
        LOGGER.debug("Deleting ServerDefined with id: {}", serverdefinedId);
        ServerDefined deleted = this.wmGenericDao.findById(serverdefinedId);
        if (deleted == null) {
            LOGGER.debug("No ServerDefined found with id: {}", serverdefinedId);
            throw new EntityNotFoundException(String.valueOf(serverdefinedId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "OfflineClassicDBTransactionManager")
    @Override
    public void delete(ServerDefined serverDefined) {
        LOGGER.debug("Deleting ServerDefined with {}", serverDefined);
        this.wmGenericDao.delete(serverDefined);
    }

    @Transactional(readOnly = true, value = "OfflineClassicDBTransactionManager")
    @Override
    public Page<ServerDefined> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ServerDefineds");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "OfflineClassicDBTransactionManager")
    @Override
    public Page<ServerDefined> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ServerDefineds");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "OfflineClassicDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service OfflineClassicDB for table ServerDefined to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "OfflineClassicDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service OfflineClassicDB for table ServerDefined to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "OfflineClassicDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "OfflineClassicDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}