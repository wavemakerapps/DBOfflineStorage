/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.dbofflinestorage.offlineclassicdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dbofflinestorage.offlineclassicdb.Productlines;
import com.dbofflinestorage.offlineclassicdb.Products;

/**
 * Service object for domain model class {@link Productlines}.
 */
public interface ProductlinesService {

    /**
     * Creates a new Productlines. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Productlines if any.
     *
     * @param productlines Details of the Productlines to be created; value cannot be null.
     * @return The newly created Productlines.
     */
    Productlines create(@Valid Productlines productlines);


	/**
     * Returns Productlines by given id if exists.
     *
     * @param productlinesId The id of the Productlines to get; value cannot be null.
     * @return Productlines associated with the given productlinesId.
	 * @throws EntityNotFoundException If no Productlines is found.
     */
    Productlines getById(String productlinesId);

    /**
     * Find and return the Productlines by given id if exists, returns null otherwise.
     *
     * @param productlinesId The id of the Productlines to get; value cannot be null.
     * @return Productlines associated with the given productlinesId.
     */
    Productlines findById(String productlinesId);

	/**
     * Find and return the list of Productlines by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param productlinesIds The id's of the Productlines to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Productlines associated with the given productlinesIds.
     */
    List<Productlines> findByMultipleIds(List<String> productlinesIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Productlines. It replaces all fields of the existing Productlines with the given productlines.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Productlines if any.
     *
     * @param productlines The details of the Productlines to be updated; value cannot be null.
     * @return The updated Productlines.
     * @throws EntityNotFoundException if no Productlines is found with given input.
     */
    Productlines update(@Valid Productlines productlines);

    /**
     * Deletes an existing Productlines with the given id.
     *
     * @param productlinesId The id of the Productlines to be deleted; value cannot be null.
     * @return The deleted Productlines.
     * @throws EntityNotFoundException if no Productlines found with the given id.
     */
    Productlines delete(String productlinesId);

    /**
     * Deletes an existing Productlines with the given object.
     *
     * @param productlines The instance of the Productlines to be deleted; value cannot be null.
     */
    void delete(Productlines productlines);

    /**
     * Find all Productlines matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Productlines.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Productlines> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Productlines matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Productlines.
     *
     * @see Pageable
     * @see Page
     */
    Page<Productlines> findAll(String query, Pageable pageable);

    /**
     * Exports all Productlines matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Productlines matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Productlines in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Productlines.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated productses for given Productlines id.
     *
     * @param productLine value of productLine; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Products instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Products> findAssociatedProductses(String productLine, Pageable pageable);

}